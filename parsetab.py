
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION ADVANCE_PAGE AND ARGUMENTO BOOLEAN BOOLEAN_AND BOOLEAN_OR CLOSE_TAG COLON COMA COMILLA_DOBLE CONCAT_EQUAL DIVISION ECHO ELSE ENDLINE EQUAL ESCAPE EXPONENTIATION FGETS FLOAT FOR FSCANF FUNCTION IDENTITY IF INTEGER IS_EQUAL IS_GREATER IS_GREATER_OR_EQUAL IS_NOT_EQUAL IS_SMALLER IS_SMALLER_OR_EQUAL LBRACKET LKEY LPAREN MODULO MULTIPLICATION NEGATION NEW NOT NULL OPEN_TAG OPERADOR_CONCATENACION OPERADOR_DECREMENTO OPERADOR_INCREMENTO OR PLUS_EQUAL PRINT PUSH RBRACKET READLINE RKEY RPAREN SETSIZE SINTAXIS_ARRAY SPLEDOUBLYLINKEDLIST SPLFIXEDARRAY STRING SUBTRACTION TAB_VERTICAL VARIABLE WHILE WHITESPACE XORcuerpo : salida \n  | asignacion \n  | funcion\n  | estructuras_controlsalida : ECHO valor ENDLINEsalida : PRINT LPAREN valor RPAREN ENDLINEvalor : ARGUMENTO \n  | INTEGER \n  | FLOAT \n  | BOOLEAN\n  | STRING\n  | VARIABLE\n  | estructuras_datos\n  | funcionesfuncion : FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEYasignacion : VARIABLE operador_asignacion valor ENDLINEasignacion : VARIABLE operador_asignacion expresion ENDLINEoperador_asignacion : EQUAL\n  | PLUS_EQUAL\n  | CONCAT_EQUALestructuras_datos : arrayoperador_comparacion : IS_EQUAL\n  | IS_GREATER_OR_EQUAL\n  | IS_NOT_EQUAL\n  | IS_SMALLER_OR_EQUAL\n  | IS_GREATER\n  | IS_SMALLERoperacion_comparacion : VARIABLE operador_comparacion VARIABLEestructuras_control : if\n  | else \n  | while \n  | forif : IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY else : if ELSE LKEY cuerpo RKEYexpresion : expresiones_logicas \n  | expresiones_aritmeticas\n  expresion_logica : BOOLEAN\n  | valor operador_comparacion valor\n  | valor operador_logico valor\n  expresiones_logicas : expresion_logica \n  | expresion_logica operador_comparacion expresiones_logicas\n  operador_aritmetico : ADDITION\n  | SUBTRACTION\n  | MULTIPLICATION\n  | DIVISION\n  | MODULO\n  | EXPONENTIATION\n  operador_logico : BOOLEAN_AND \n  | BOOLEAN_OR \n  | AND \n  | OR \n  | XOR \n  expresion_aritmetica : valor operador_aritmetico valorexpresiones_aritmeticas : expresion_aritmetica \n  | expresion_aritmetica operador_aritmetico expresiones_aritmeticas\n  lectura : FGETS LPAREN VARIABLE COMA INTEGER RPAREN ENDLINE while : WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpowhile : WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEYarray : LBRACKET valor RBRACKETfunciones : valor LPAREN valor RPAREN LKEY cuerpo RKEYtipo_operador : ADDITION \n  | SUBTRACTION \n  | MULTIPLICATION \n  | DIVISION \n  | MODULO \n  | EXPONENTIATIONforma_operacion : VARIABLE OPERADOR_INCREMENTO \n  | OPERADOR_INCREMENTO VARIABLE \n  | VARIABLE OPERADOR_DECREMENTO \n  | OPERADOR_DECREMENTO VARIABLE \n  | VARIABLE EQUAL VARIABLE tipo_operador INTEGERfor : FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY'
    
_lr_action_items = {'ECHO':([0,50,98,101,109,115,132,],[6,6,6,6,6,6,6,]),'PRINT':([0,50,98,101,109,115,132,],[7,7,7,7,7,7,7,]),'VARIABLE':([0,6,27,28,29,30,31,32,35,36,37,39,49,50,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,86,98,101,105,109,115,120,123,124,127,132,],[8,23,23,23,23,-18,-19,-20,23,23,55,23,83,8,23,23,23,-22,-23,-24,-25,-26,-27,-48,-49,-50,-51,-52,-42,-43,-44,-45,-46,-47,23,23,23,8,8,111,8,8,121,129,130,131,8,]),'FUNCTION':([0,50,98,101,109,115,132,],[9,9,9,9,9,9,9,]),'IF':([0,50,98,101,109,115,132,],[14,14,14,14,14,14,14,]),'WHILE':([0,50,98,101,109,115,132,],[15,15,15,15,15,15,15,]),'FOR':([0,50,98,101,109,115,132,],[16,16,16,16,16,16,16,]),'$end':([1,2,3,4,5,10,11,12,13,38,59,80,89,97,108,113,114,119,142,],[0,-1,-2,-3,-4,-29,-30,-31,-32,-5,-16,-17,-6,-34,-33,-15,-57,-58,-72,]),'RKEY':([2,3,4,5,10,11,12,13,38,59,80,84,89,97,103,106,107,108,113,114,117,119,140,142,],[-1,-2,-3,-4,-29,-30,-31,-32,-5,-16,-17,97,-6,-34,108,112,113,-33,-15,-57,119,-58,142,-72,]),'ARGUMENTO':([6,9,27,28,29,30,31,32,35,36,39,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,86,102,],[18,33,18,18,18,-18,-19,-20,18,18,18,18,18,18,-22,-23,-24,-25,-26,-27,-48,-49,-50,-51,-52,-42,-43,-44,-45,-46,-47,18,18,18,107,]),'INTEGER':([6,27,28,29,30,31,32,35,36,39,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,86,87,116,133,134,135,136,137,138,139,],[19,19,19,19,-18,-19,-20,19,19,19,19,19,19,-22,-23,-24,-25,-26,-27,-48,-49,-50,-51,-52,-42,-43,-44,-45,-46,-47,19,19,19,100,118,141,-61,-62,-63,-64,-65,-66,]),'FLOAT':([6,27,28,29,30,31,32,35,36,39,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,86,],[20,20,20,20,-18,-19,-20,20,20,20,20,20,20,-22,-23,-24,-25,-26,-27,-48,-49,-50,-51,-52,-42,-43,-44,-45,-46,-47,20,20,20,]),'BOOLEAN':([6,27,28,29,30,31,32,35,36,39,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,86,],[21,21,21,44,-18,-19,-20,52,21,21,21,21,21,-22,-23,-24,-25,-26,-27,-48,-49,-50,-51,-52,-42,-43,-44,-45,-46,-47,52,21,21,]),'STRING':([6,27,28,29,30,31,32,35,36,39,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,86,],[22,22,22,22,-18,-19,-20,22,22,22,22,22,22,-22,-23,-24,-25,-26,-27,-48,-49,-50,-51,-52,-42,-43,-44,-45,-46,-47,22,22,22,]),'LBRACKET':([6,27,28,29,30,31,32,35,36,39,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,86,],[27,27,27,27,-18,-19,-20,27,27,27,27,27,27,-22,-23,-24,-25,-26,-27,-48,-49,-50,-51,-52,-42,-43,-44,-45,-46,-47,27,27,27,]),'LPAREN':([7,14,15,16,17,18,19,20,21,22,23,24,25,26,33,40,41,42,44,52,53,54,56,57,90,91,92,95,99,112,],[28,35,36,37,39,-7,-8,-9,-10,-11,-12,-13,-14,-21,49,39,39,39,-10,-10,39,39,39,-59,39,39,39,39,39,-60,]),'EQUAL':([8,55,121,],[30,87,127,]),'PLUS_EQUAL':([8,],[31,]),'CONCAT_EQUAL':([8,],[32,]),'ELSE':([10,108,],[34,-33,]),'ENDLINE':([17,18,19,20,21,22,23,24,25,26,42,43,44,45,46,47,48,52,57,58,90,91,92,93,94,100,112,118,],[38,-7,-8,-9,-10,-11,-12,-13,-14,-21,59,80,-10,-35,-36,-40,-54,-37,-59,89,-38,-39,-53,-41,-55,105,-60,120,]),'RBRACKET':([18,19,20,21,22,23,24,25,26,40,57,112,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,57,-59,-60,]),'RPAREN':([18,19,20,21,22,23,24,25,26,41,47,51,52,56,57,83,90,91,93,99,112,122,125,126,129,130,141,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,58,-40,85,-37,88,-59,96,-38,-39,-41,104,-60,128,-67,-69,-68,-70,-71,]),'IS_EQUAL':([18,19,20,21,22,23,24,25,26,42,44,47,52,53,54,57,90,91,111,112,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,63,-10,63,-10,63,63,-59,-38,-39,63,-60,]),'IS_GREATER_OR_EQUAL':([18,19,20,21,22,23,24,25,26,42,44,47,52,53,54,57,90,91,111,112,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,64,-10,64,-10,64,64,-59,-38,-39,64,-60,]),'IS_NOT_EQUAL':([18,19,20,21,22,23,24,25,26,42,44,47,52,53,54,57,90,91,111,112,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,65,-10,65,-10,65,65,-59,-38,-39,65,-60,]),'IS_SMALLER_OR_EQUAL':([18,19,20,21,22,23,24,25,26,42,44,47,52,53,54,57,90,91,111,112,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,66,-10,66,-10,66,66,-59,-38,-39,66,-60,]),'IS_GREATER':([18,19,20,21,22,23,24,25,26,42,44,47,52,53,54,57,90,91,111,112,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,67,-10,67,-10,67,67,-59,-38,-39,67,-60,]),'IS_SMALLER':([18,19,20,21,22,23,24,25,26,42,44,47,52,53,54,57,90,91,111,112,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,68,-10,68,-10,68,68,-59,-38,-39,68,-60,]),'BOOLEAN_AND':([18,19,20,22,23,24,25,26,42,44,52,53,57,112,],[-7,-8,-9,-11,-12,-13,-14,-21,69,-10,-10,69,-59,-60,]),'BOOLEAN_OR':([18,19,20,22,23,24,25,26,42,44,52,53,57,112,],[-7,-8,-9,-11,-12,-13,-14,-21,70,-10,-10,70,-59,-60,]),'AND':([18,19,20,22,23,24,25,26,42,44,52,53,57,112,],[-7,-8,-9,-11,-12,-13,-14,-21,71,-10,-10,71,-59,-60,]),'OR':([18,19,20,22,23,24,25,26,42,44,52,53,57,112,],[-7,-8,-9,-11,-12,-13,-14,-21,72,-10,-10,72,-59,-60,]),'XOR':([18,19,20,22,23,24,25,26,42,44,52,53,57,112,],[-7,-8,-9,-11,-12,-13,-14,-21,73,-10,-10,73,-59,-60,]),'ADDITION':([18,19,20,21,22,23,24,25,26,42,44,48,57,92,95,112,131,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,74,-10,74,-59,-53,74,-60,134,]),'SUBTRACTION':([18,19,20,21,22,23,24,25,26,42,44,48,57,92,95,112,131,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,75,-10,75,-59,-53,75,-60,135,]),'MULTIPLICATION':([18,19,20,21,22,23,24,25,26,42,44,48,57,92,95,112,131,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,76,-10,76,-59,-53,76,-60,136,]),'DIVISION':([18,19,20,21,22,23,24,25,26,42,44,48,57,92,95,112,131,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,77,-10,77,-59,-53,77,-60,137,]),'MODULO':([18,19,20,21,22,23,24,25,26,42,44,48,57,92,95,112,131,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,78,-10,78,-59,-53,78,-60,138,]),'EXPONENTIATION':([18,19,20,21,22,23,24,25,26,42,44,48,57,92,95,112,131,],[-7,-8,-9,-10,-11,-12,-13,-14,-21,79,-10,79,-59,-53,79,-60,139,]),'LKEY':([34,85,88,96,104,128,],[50,98,101,102,110,132,]),'COLON':([104,],[109,]),'TAB_VERTICAL':([110,],[115,]),'OPERADOR_INCREMENTO':([120,121,],[123,125,]),'OPERADOR_DECREMENTO':([120,121,],[124,126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,50,98,101,109,115,132,],[1,84,103,106,114,117,140,]),'salida':([0,50,98,101,109,115,132,],[2,2,2,2,2,2,2,]),'asignacion':([0,50,98,101,109,115,132,],[3,3,3,3,3,3,3,]),'funcion':([0,50,98,101,109,115,132,],[4,4,4,4,4,4,4,]),'estructuras_control':([0,50,98,101,109,115,132,],[5,5,5,5,5,5,5,]),'if':([0,50,98,101,109,115,132,],[10,10,10,10,10,10,10,]),'else':([0,50,98,101,109,115,132,],[11,11,11,11,11,11,11,]),'while':([0,50,98,101,109,115,132,],[12,12,12,12,12,12,12,]),'for':([0,50,98,101,109,115,132,],[13,13,13,13,13,13,13,]),'valor':([6,27,28,29,35,36,39,60,61,62,81,82,86,],[17,40,41,42,53,54,56,90,91,92,53,95,99,]),'estructuras_datos':([6,27,28,29,35,36,39,60,61,62,81,82,86,],[24,24,24,24,24,24,24,24,24,24,24,24,24,]),'funciones':([6,27,28,29,35,36,39,60,61,62,81,82,86,],[25,25,25,25,25,25,25,25,25,25,25,25,25,]),'array':([6,27,28,29,35,36,39,60,61,62,81,82,86,],[26,26,26,26,26,26,26,26,26,26,26,26,26,]),'operador_asignacion':([8,],[29,]),'expresion':([29,],[43,]),'expresiones_logicas':([29,35,81,],[45,51,93,]),'expresiones_aritmeticas':([29,82,],[46,94,]),'expresion_logica':([29,35,81,],[47,47,47,]),'expresion_aritmetica':([29,82,],[48,48,]),'operador_comparacion':([42,47,53,54,111,],[60,81,60,86,116,]),'operador_logico':([42,53,],[61,61,]),'operador_aritmetico':([42,48,95,],[62,82,62,]),'forma_operacion':([120,],[122,]),'tipo_operador':([131,],[133,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> salida','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',5),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',6),
  ('cuerpo -> funcion','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',7),
  ('cuerpo -> estructuras_control','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',8),
  ('salida -> ECHO valor ENDLINE','salida',3,'p_salida','sintacticoPrueba.py',12),
  ('salida -> PRINT LPAREN valor RPAREN ENDLINE','salida',5,'p_salida_print','sintacticoPrueba.py',17),
  ('valor -> ARGUMENTO','valor',1,'p_valor','sintacticoPrueba.py',20),
  ('valor -> INTEGER','valor',1,'p_valor','sintacticoPrueba.py',21),
  ('valor -> FLOAT','valor',1,'p_valor','sintacticoPrueba.py',22),
  ('valor -> BOOLEAN','valor',1,'p_valor','sintacticoPrueba.py',23),
  ('valor -> STRING','valor',1,'p_valor','sintacticoPrueba.py',24),
  ('valor -> VARIABLE','valor',1,'p_valor','sintacticoPrueba.py',25),
  ('valor -> estructuras_datos','valor',1,'p_valor','sintacticoPrueba.py',26),
  ('valor -> funciones','valor',1,'p_valor','sintacticoPrueba.py',27),
  ('funcion -> FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY','funcion',8,'p_funcion','sintacticoPrueba.py',30),
  ('asignacion -> VARIABLE operador_asignacion valor ENDLINE','asignacion',4,'p_asignacion','sintacticoPrueba.py',33),
  ('asignacion -> VARIABLE operador_asignacion expresion ENDLINE','asignacion',4,'p_asignacion_expresion','sintacticoPrueba.py',36),
  ('operador_asignacion -> EQUAL','operador_asignacion',1,'p_operador_asignacion','sintacticoPrueba.py',39),
  ('operador_asignacion -> PLUS_EQUAL','operador_asignacion',1,'p_operador_asignacion','sintacticoPrueba.py',40),
  ('operador_asignacion -> CONCAT_EQUAL','operador_asignacion',1,'p_operador_asignacion','sintacticoPrueba.py',41),
  ('estructuras_datos -> array','estructuras_datos',1,'p_estructuras_datos','sintacticoPrueba.py',44),
  ('operador_comparacion -> IS_EQUAL','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',47),
  ('operador_comparacion -> IS_GREATER_OR_EQUAL','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',48),
  ('operador_comparacion -> IS_NOT_EQUAL','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',49),
  ('operador_comparacion -> IS_SMALLER_OR_EQUAL','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',50),
  ('operador_comparacion -> IS_GREATER','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',51),
  ('operador_comparacion -> IS_SMALLER','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',52),
  ('operacion_comparacion -> VARIABLE operador_comparacion VARIABLE','operacion_comparacion',3,'p_operacion_comparacion','sintacticoPrueba.py',57),
  ('estructuras_control -> if','estructuras_control',1,'p_estructuras_control','sintacticoPrueba.py',60),
  ('estructuras_control -> else','estructuras_control',1,'p_estructuras_control','sintacticoPrueba.py',61),
  ('estructuras_control -> while','estructuras_control',1,'p_estructuras_control','sintacticoPrueba.py',62),
  ('estructuras_control -> for','estructuras_control',1,'p_estructuras_control','sintacticoPrueba.py',63),
  ('if -> IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY','if',7,'p_if','sintacticoPrueba.py',67),
  ('else -> if ELSE LKEY cuerpo RKEY','else',5,'p_else','sintacticoPrueba.py',70),
  ('expresion -> expresiones_logicas','expresion',1,'p_expresion','sintacticoPrueba.py',73),
  ('expresion -> expresiones_aritmeticas','expresion',1,'p_expresion','sintacticoPrueba.py',74),
  ('expresion_logica -> BOOLEAN','expresion_logica',1,'p_expresion_logica','sintacticoPrueba.py',79),
  ('expresion_logica -> valor operador_comparacion valor','expresion_logica',3,'p_expresion_logica','sintacticoPrueba.py',80),
  ('expresion_logica -> valor operador_logico valor','expresion_logica',3,'p_expresion_logica','sintacticoPrueba.py',81),
  ('expresiones_logicas -> expresion_logica','expresiones_logicas',1,'p_expresiones_logicas','sintacticoPrueba.py',85),
  ('expresiones_logicas -> expresion_logica operador_comparacion expresiones_logicas','expresiones_logicas',3,'p_expresiones_logicas','sintacticoPrueba.py',86),
  ('operador_aritmetico -> ADDITION','operador_aritmetico',1,'p_operador_aritmetico','sintacticoPrueba.py',91),
  ('operador_aritmetico -> SUBTRACTION','operador_aritmetico',1,'p_operador_aritmetico','sintacticoPrueba.py',92),
  ('operador_aritmetico -> MULTIPLICATION','operador_aritmetico',1,'p_operador_aritmetico','sintacticoPrueba.py',93),
  ('operador_aritmetico -> DIVISION','operador_aritmetico',1,'p_operador_aritmetico','sintacticoPrueba.py',94),
  ('operador_aritmetico -> MODULO','operador_aritmetico',1,'p_operador_aritmetico','sintacticoPrueba.py',95),
  ('operador_aritmetico -> EXPONENTIATION','operador_aritmetico',1,'p_operador_aritmetico','sintacticoPrueba.py',96),
  ('operador_logico -> BOOLEAN_AND','operador_logico',1,'p_operador_logico','sintacticoPrueba.py',100),
  ('operador_logico -> BOOLEAN_OR','operador_logico',1,'p_operador_logico','sintacticoPrueba.py',101),
  ('operador_logico -> AND','operador_logico',1,'p_operador_logico','sintacticoPrueba.py',102),
  ('operador_logico -> OR','operador_logico',1,'p_operador_logico','sintacticoPrueba.py',103),
  ('operador_logico -> XOR','operador_logico',1,'p_operador_logico','sintacticoPrueba.py',104),
  ('expresion_aritmetica -> valor operador_aritmetico valor','expresion_aritmetica',3,'p_expresion_aritmetica','sintacticoPrueba.py',108),
  ('expresiones_aritmeticas -> expresion_aritmetica','expresiones_aritmeticas',1,'p_expresiones_aritmeticas','sintacticoPrueba.py',112),
  ('expresiones_aritmeticas -> expresion_aritmetica operador_aritmetico expresiones_aritmeticas','expresiones_aritmeticas',3,'p_expresiones_aritmeticas','sintacticoPrueba.py',113),
  ('lectura -> FGETS LPAREN VARIABLE COMA INTEGER RPAREN ENDLINE','lectura',7,'p_lectura','sintacticoPrueba.py',117),
  ('while -> WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo','while',8,'p_while_v1','sintacticoPrueba.py',120),
  ('while -> WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY','while',10,'p_while_v2','sintacticoPrueba.py',123),
  ('array -> LBRACKET valor RBRACKET','array',3,'p_array','sintacticoPrueba.py',126),
  ('funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY','funciones',7,'p_funciones','sintacticoPrueba.py',129),
  ('tipo_operador -> ADDITION','tipo_operador',1,'p_tipo_operador','sintacticoPrueba.py',133),
  ('tipo_operador -> SUBTRACTION','tipo_operador',1,'p_tipo_operador','sintacticoPrueba.py',134),
  ('tipo_operador -> MULTIPLICATION','tipo_operador',1,'p_tipo_operador','sintacticoPrueba.py',135),
  ('tipo_operador -> DIVISION','tipo_operador',1,'p_tipo_operador','sintacticoPrueba.py',136),
  ('tipo_operador -> MODULO','tipo_operador',1,'p_tipo_operador','sintacticoPrueba.py',137),
  ('tipo_operador -> EXPONENTIATION','tipo_operador',1,'p_tipo_operador','sintacticoPrueba.py',138),
  ('forma_operacion -> VARIABLE OPERADOR_INCREMENTO','forma_operacion',2,'p_forma_operacion','sintacticoPrueba.py',143),
  ('forma_operacion -> OPERADOR_INCREMENTO VARIABLE','forma_operacion',2,'p_forma_operacion','sintacticoPrueba.py',144),
  ('forma_operacion -> VARIABLE OPERADOR_DECREMENTO','forma_operacion',2,'p_forma_operacion','sintacticoPrueba.py',145),
  ('forma_operacion -> OPERADOR_DECREMENTO VARIABLE','forma_operacion',2,'p_forma_operacion','sintacticoPrueba.py',146),
  ('forma_operacion -> VARIABLE EQUAL VARIABLE tipo_operador INTEGER','forma_operacion',5,'p_forma_operacion','sintacticoPrueba.py',147),
  ('for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY','for',15,'p_for','sintacticoPrueba.py',152),
]
