
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION ADVANCE_PAGE AND ARGUMENTO BOOLEAN BOOLEAN_AND BOOLEAN_OR CLOSE_TAG COLON COMILLA_DOBLE CONCAT_EQUAL DIVISION ECHO ELSE ENDLINE EQUAL ESCAPE EXPONENTIATION FGETS FLOAT FOR FSCANF FUNCTION IDENTITY IF INTEGER IS_EQUAL IS_GREATER IS_GREATER_OR_EQUAL IS_NOT_EQUAL IS_SMALLER IS_SMALLER_OR_EQUAL LBRACKET LKEY LPAREN MODULO MULTIPLICATION NEGATION NEW NOT NULL OPEN_TAG OPERADOR_CONCATENACION OPERADOR_DECREMENTO OPERADOR_INCREMENTO OR PLUS_EQUAL PRINT PUSH RBRACKET READLINE RKEY RPAREN SETSIZE SINTAXIS_ARRAY SPLEDOUBLYLINKEDLIST SPLFIXEDARRAY STRING SUBTRACTION TAB_VERTICAL VARIABLE WHILE WHITESPACE XORcuerpo : salida \n  | asignacion \n  | funcion\n  | estructuras_control\n  | buclessalida : ECHO valor ENDLINEsalida : PRINT LPAREN valor RPARENvalor : ARGUMENTO \n  | INTEGER \n  | FLOAT \n  | BOOLEAN\n  | STRING\n  | VARIABLE\n  | estructuras_datos\n  | funcionesfuncion : FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEYasignacion : VARIABLE operador_asignacion valor ENDLINEoperador_asignacion : EQUAL\n  | PLUS_EQUAL\n  | CONCAT_EQUALestructuras_datos : arrayoperador_comparacion : IS_EQUAL\n  | IS_GREATER_OR_EQUAL\n  | IS_NOT_EQUAL\n  | IS_SMALLER_OR_EQUAL\n  | IS_GREATER\n  | IS_SMALLERestructuras_control : if\n  | elsebucles : whileif : IF LPAREN expresion_logica RPAREN LKEY cuerpo RKEY else : if ELSE LKEY cuerpo RKEYexpresion_logica : BOOLEAN\n  | valor AND valor\n  | valor OR valor\n  | valor XOR valor\n  | NOT valor\n  | valor BOOLEAN_AND valor\n  | valor BOOLEAN_OR valor\n  while : WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpowhile : WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEYarray : LBRACKET valor RBRACKET ENDLINEfunciones : valor LPAREN valor RPAREN LKEY cuerpo RKEY'
    
_lr_action_items = {'ECHO':([0,42,72,79,86,91,],[7,7,7,7,7,7,]),'PRINT':([0,42,72,79,86,91,],[8,8,8,8,8,8,]),'VARIABLE':([0,7,26,27,28,29,30,31,34,35,37,41,42,46,55,56,57,58,59,61,62,63,64,65,66,67,72,79,86,91,],[9,22,22,22,22,-18,-19,-20,22,22,22,52,9,22,22,22,22,22,22,22,-22,-23,-24,-25,-26,-27,9,9,9,9,]),'FUNCTION':([0,42,72,79,86,91,],[10,10,10,10,10,10,]),'IF':([0,42,72,79,86,91,],[14,14,14,14,14,14,]),'WHILE':([0,42,72,79,86,91,],[15,15,15,15,15,15,]),'$end':([1,2,3,4,5,6,11,12,13,36,50,51,71,85,89,90,93,],[0,-1,-2,-3,-4,-5,-28,-29,-30,-6,-7,-17,-32,-31,-16,-40,-41,]),'RKEY':([2,3,4,5,6,11,12,13,36,50,51,53,71,81,83,84,85,89,90,92,93,],[-1,-2,-3,-4,-5,-28,-29,-30,-6,-7,-17,71,-32,85,88,89,-31,-16,-40,93,-41,]),'ARGUMENTO':([7,10,26,27,28,29,30,31,34,35,37,46,55,56,57,58,59,61,62,63,64,65,66,67,80,],[17,32,17,17,17,-18,-19,-20,17,17,17,17,17,17,17,17,17,17,-22,-23,-24,-25,-26,-27,84,]),'INTEGER':([7,26,27,28,29,30,31,34,35,37,46,55,56,57,58,59,61,62,63,64,65,66,67,],[18,18,18,18,-18,-19,-20,18,18,18,18,18,18,18,18,18,18,-22,-23,-24,-25,-26,-27,]),'FLOAT':([7,26,27,28,29,30,31,34,35,37,46,55,56,57,58,59,61,62,63,64,65,66,67,],[19,19,19,19,-18,-19,-20,19,19,19,19,19,19,19,19,19,19,-22,-23,-24,-25,-26,-27,]),'BOOLEAN':([7,26,27,28,29,30,31,34,35,37,46,55,56,57,58,59,61,62,63,64,65,66,67,],[20,20,20,20,-18,-19,-20,44,20,20,20,20,20,20,20,20,20,-22,-23,-24,-25,-26,-27,]),'STRING':([7,26,27,28,29,30,31,34,35,37,46,55,56,57,58,59,61,62,63,64,65,66,67,],[21,21,21,21,-18,-19,-20,21,21,21,21,21,21,21,21,21,21,-22,-23,-24,-25,-26,-27,]),'LBRACKET':([7,26,27,28,29,30,31,34,35,37,46,55,56,57,58,59,61,62,63,64,65,66,67,],[26,26,26,26,-18,-19,-20,26,26,26,26,26,26,26,26,26,26,-22,-23,-24,-25,-26,-27,]),'LPAREN':([8,14,15,16,17,18,19,20,21,22,23,24,25,32,38,39,40,44,45,47,48,60,69,73,74,75,76,77,78,88,],[27,34,35,37,-8,-9,-10,-11,-12,-13,-14,-15,-21,41,37,37,37,-11,37,37,37,37,-42,37,37,37,37,37,37,-43,]),'EQUAL':([9,],[29,]),'PLUS_EQUAL':([9,],[30,]),'CONCAT_EQUAL':([9,],[31,]),'ELSE':([11,85,],[33,-31,]),'ENDLINE':([16,17,18,19,20,21,22,23,24,25,40,49,69,88,],[36,-8,-9,-10,-11,-12,-13,-14,-15,-21,51,69,-42,-43,]),'RBRACKET':([17,18,19,20,21,22,23,24,25,38,69,88,],[-8,-9,-10,-11,-12,-13,-14,-15,-21,49,-42,-43,]),'RPAREN':([17,18,19,20,21,22,23,24,25,39,43,44,48,52,60,69,73,74,75,76,77,78,88,],[-8,-9,-10,-11,-12,-13,-14,-15,-21,50,54,-33,68,70,-37,-42,-34,-35,-36,-38,-39,82,-43,]),'AND':([17,18,19,21,22,23,24,25,44,45,69,88,],[-8,-9,-10,-12,-13,-14,-15,-21,-11,55,-42,-43,]),'OR':([17,18,19,21,22,23,24,25,44,45,69,88,],[-8,-9,-10,-12,-13,-14,-15,-21,-11,56,-42,-43,]),'XOR':([17,18,19,21,22,23,24,25,44,45,69,88,],[-8,-9,-10,-12,-13,-14,-15,-21,-11,57,-42,-43,]),'BOOLEAN_AND':([17,18,19,21,22,23,24,25,44,45,69,88,],[-8,-9,-10,-12,-13,-14,-15,-21,-11,58,-42,-43,]),'BOOLEAN_OR':([17,18,19,21,22,23,24,25,44,45,69,88,],[-8,-9,-10,-12,-13,-14,-15,-21,-11,59,-42,-43,]),'IS_EQUAL':([17,18,19,20,21,22,23,24,25,47,69,88,],[-8,-9,-10,-11,-12,-13,-14,-15,-21,62,-42,-43,]),'IS_GREATER_OR_EQUAL':([17,18,19,20,21,22,23,24,25,47,69,88,],[-8,-9,-10,-11,-12,-13,-14,-15,-21,63,-42,-43,]),'IS_NOT_EQUAL':([17,18,19,20,21,22,23,24,25,47,69,88,],[-8,-9,-10,-11,-12,-13,-14,-15,-21,64,-42,-43,]),'IS_SMALLER_OR_EQUAL':([17,18,19,20,21,22,23,24,25,47,69,88,],[-8,-9,-10,-11,-12,-13,-14,-15,-21,65,-42,-43,]),'IS_GREATER':([17,18,19,20,21,22,23,24,25,47,69,88,],[-8,-9,-10,-11,-12,-13,-14,-15,-21,66,-42,-43,]),'IS_SMALLER':([17,18,19,20,21,22,23,24,25,47,69,88,],[-8,-9,-10,-11,-12,-13,-14,-15,-21,67,-42,-43,]),'LKEY':([33,54,68,70,82,],[42,72,79,80,87,]),'NOT':([34,],[46,]),'COLON':([82,],[86,]),'TAB_VERTICAL':([87,],[91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,42,72,79,86,91,],[1,53,81,83,90,92,]),'salida':([0,42,72,79,86,91,],[2,2,2,2,2,2,]),'asignacion':([0,42,72,79,86,91,],[3,3,3,3,3,3,]),'funcion':([0,42,72,79,86,91,],[4,4,4,4,4,4,]),'estructuras_control':([0,42,72,79,86,91,],[5,5,5,5,5,5,]),'bucles':([0,42,72,79,86,91,],[6,6,6,6,6,6,]),'if':([0,42,72,79,86,91,],[11,11,11,11,11,11,]),'else':([0,42,72,79,86,91,],[12,12,12,12,12,12,]),'while':([0,42,72,79,86,91,],[13,13,13,13,13,13,]),'valor':([7,26,27,28,34,35,37,46,55,56,57,58,59,61,],[16,38,39,40,45,47,48,60,73,74,75,76,77,78,]),'estructuras_datos':([7,26,27,28,34,35,37,46,55,56,57,58,59,61,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'funciones':([7,26,27,28,34,35,37,46,55,56,57,58,59,61,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'array':([7,26,27,28,34,35,37,46,55,56,57,58,59,61,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'operador_asignacion':([9,],[28,]),'expresion_logica':([34,],[43,]),'operador_comparacion':([47,],[61,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> salida','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',5),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',6),
  ('cuerpo -> funcion','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',7),
  ('cuerpo -> estructuras_control','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',8),
  ('cuerpo -> bucles','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',9),
  ('salida -> ECHO valor ENDLINE','salida',3,'p_salida','sintacticoPrueba.py',12),
  ('salida -> PRINT LPAREN valor RPAREN','salida',4,'p_salida_print','sintacticoPrueba.py',15),
  ('valor -> ARGUMENTO','valor',1,'p_valor','sintacticoPrueba.py',18),
  ('valor -> INTEGER','valor',1,'p_valor','sintacticoPrueba.py',19),
  ('valor -> FLOAT','valor',1,'p_valor','sintacticoPrueba.py',20),
  ('valor -> BOOLEAN','valor',1,'p_valor','sintacticoPrueba.py',21),
  ('valor -> STRING','valor',1,'p_valor','sintacticoPrueba.py',22),
  ('valor -> VARIABLE','valor',1,'p_valor','sintacticoPrueba.py',23),
  ('valor -> estructuras_datos','valor',1,'p_valor','sintacticoPrueba.py',24),
  ('valor -> funciones','valor',1,'p_valor','sintacticoPrueba.py',25),
  ('funcion -> FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY','funcion',8,'p_funcion','sintacticoPrueba.py',28),
  ('asignacion -> VARIABLE operador_asignacion valor ENDLINE','asignacion',4,'p_asignacion','sintacticoPrueba.py',31),
  ('operador_asignacion -> EQUAL','operador_asignacion',1,'p_operador_asignacion','sintacticoPrueba.py',34),
  ('operador_asignacion -> PLUS_EQUAL','operador_asignacion',1,'p_operador_asignacion','sintacticoPrueba.py',35),
  ('operador_asignacion -> CONCAT_EQUAL','operador_asignacion',1,'p_operador_asignacion','sintacticoPrueba.py',36),
  ('estructuras_datos -> array','estructuras_datos',1,'p_estructuras_datos','sintacticoPrueba.py',39),
  ('operador_comparacion -> IS_EQUAL','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',42),
  ('operador_comparacion -> IS_GREATER_OR_EQUAL','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',43),
  ('operador_comparacion -> IS_NOT_EQUAL','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',44),
  ('operador_comparacion -> IS_SMALLER_OR_EQUAL','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',45),
  ('operador_comparacion -> IS_GREATER','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',46),
  ('operador_comparacion -> IS_SMALLER','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',47),
  ('estructuras_control -> if','estructuras_control',1,'p_estructuras_control','sintacticoPrueba.py',50),
  ('estructuras_control -> else','estructuras_control',1,'p_estructuras_control','sintacticoPrueba.py',51),
  ('bucles -> while','bucles',1,'p_bucles','sintacticoPrueba.py',54),
  ('if -> IF LPAREN expresion_logica RPAREN LKEY cuerpo RKEY','if',7,'p_if','sintacticoPrueba.py',58),
  ('else -> if ELSE LKEY cuerpo RKEY','else',5,'p_else','sintacticoPrueba.py',61),
  ('expresion_logica -> BOOLEAN','expresion_logica',1,'p_expresion_logica','sintacticoPrueba.py',64),
  ('expresion_logica -> valor AND valor','expresion_logica',3,'p_expresion_logica','sintacticoPrueba.py',65),
  ('expresion_logica -> valor OR valor','expresion_logica',3,'p_expresion_logica','sintacticoPrueba.py',66),
  ('expresion_logica -> valor XOR valor','expresion_logica',3,'p_expresion_logica','sintacticoPrueba.py',67),
  ('expresion_logica -> NOT valor','expresion_logica',2,'p_expresion_logica','sintacticoPrueba.py',68),
  ('expresion_logica -> valor BOOLEAN_AND valor','expresion_logica',3,'p_expresion_logica','sintacticoPrueba.py',69),
  ('expresion_logica -> valor BOOLEAN_OR valor','expresion_logica',3,'p_expresion_logica','sintacticoPrueba.py',70),
  ('while -> WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo','while',8,'p_while_v1','sintacticoPrueba.py',75),
  ('while -> WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY','while',10,'p_while_v2','sintacticoPrueba.py',78),
  ('array -> LBRACKET valor RBRACKET ENDLINE','array',4,'p_array','sintacticoPrueba.py',81),
  ('funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY','funciones',7,'p_funciones','sintacticoPrueba.py',84),
]
