
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION ADVANCE_PAGE AND ARGUMENTO BOOLEAN BOOLEAN_AND BOOLEAN_OR CLOSE_TAG COLON COMILLA_DOBLE CONCAT_EQUAL DIVISION ECHO ELSE ENDLINE EQUAL ESCAPE EXPONENTIATION FGETS FLOAT FOR FSCANF FUNCTION IDENTITY IF INTEGER IS_EQUAL IS_GREATER IS_GREATER_OR_EQUAL IS_NOT_EQUAL IS_SMALLER IS_SMALLER_OR_EQUAL LBRACKET LKEY LPAREN MODULO MULTIPLICATION NEGATION NEW NOT NULL OPEN_TAG OPERADOR_CONCATENACION OPERADOR_DECREMENTO OPERADOR_INCREMENTO OR PLUS_EQUAL PRINT PUSH RBRACKET READLINE RKEY RPAREN SETSIZE SINTAXIS_ARRAY SPLEDOUBLYLINKEDLIST SPLFIXEDARRAY STRING SUBTRACTION TAB_VERTICAL VARIABLE WHILE WHITESPACE XORcuerpo : salida \n  | asignacion \n  | funcion\n  | estructuras_controlsalida : ECHO valor ENDLINEsalida : PRINT LPAREN valor RPAREN ENDLINEvalor : ARGUMENTO \n  | INTEGER \n  | FLOAT \n  | BOOLEAN\n  | STRING\n  | VARIABLE\n  | estructuras_datos\n  | funcionesfuncion : FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEYasignacion : VARIABLE operador_asignacion valor ENDLINEoperador_asignacion : EQUAL\n  | PLUS_EQUAL\n  | CONCAT_EQUALestructuras_datos : arrayoperador_comparacion : IS_EQUAL\n  | IS_GREATER_OR_EQUAL\n  | IS_NOT_EQUAL\n  | IS_SMALLER_OR_EQUAL\n  | IS_GREATER\n  | IS_SMALLERoperacion_comparacion : VARIABLE operador_comparacion VARIABLEestructuras_control : if\n  | else \n  | while \n  | forif : IF LPAREN expresion_logica RPAREN LKEY cuerpo RKEY else : if ELSE LKEY cuerpo RKEYexpresion_logica : BOOLEAN\n  | valor AND valor\n  | valor OR valor\n  | valor XOR valor\n  | NOT valor\n  | valor BOOLEAN_AND valor\n  | valor BOOLEAN_OR valor\n  while : WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpowhile : WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEYarray : LBRACKET valor RBRACKETfunciones : valor LPAREN valor RPAREN LKEY cuerpo RKEYtipo_operador : ADDITION \n  | SUBTRACTION \n  | MULTIPLICATION \n  | DIVISION \n  | MODULO \n  | EXPONENTIATIONforma_operacion : VARIABLE OPERADOR_INCREMENTO \n  | OPERADOR_INCREMENTO VARIABLE \n  | VARIABLE OPERADOR_DECREMENTO \n  | OPERADOR_DECREMENTO VARIABLE \n  | VARIABLE EQUAL VARIABLE tipo_operador INTEGERfor : FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY'
    
_lr_action_items = {'ECHO':([0,44,76,84,92,98,115,],[6,6,6,6,6,6,6,]),'PRINT':([0,44,76,84,92,98,115,],[7,7,7,7,7,7,7,]),'VARIABLE':([0,6,27,28,29,30,31,32,35,36,37,39,43,44,48,58,59,60,61,62,64,65,66,67,68,69,70,76,84,88,92,98,103,106,107,110,115,],[8,23,23,23,23,-17,-18,-19,23,23,50,23,55,8,23,23,23,23,23,23,23,-21,-22,-23,-24,-25,-26,8,8,94,8,8,104,112,113,114,8,]),'FUNCTION':([0,44,76,84,92,98,115,],[9,9,9,9,9,9,9,]),'IF':([0,44,76,84,92,98,115,],[14,14,14,14,14,14,14,]),'WHILE':([0,44,76,84,92,98,115,],[15,15,15,15,15,15,15,]),'FOR':([0,44,76,84,92,98,115,],[16,16,16,16,16,16,16,]),'$end':([1,2,3,4,5,10,11,12,13,38,54,73,75,91,96,97,102,125,],[0,-1,-2,-3,-4,-28,-29,-30,-31,-5,-16,-6,-33,-32,-15,-41,-42,-56,]),'RKEY':([2,3,4,5,10,11,12,13,38,54,56,73,75,86,89,90,91,96,97,100,102,123,125,],[-1,-2,-3,-4,-28,-29,-30,-31,-5,-16,75,-6,-33,91,95,96,-32,-15,-41,102,-42,125,-56,]),'ARGUMENTO':([6,9,27,28,29,30,31,32,35,36,39,48,58,59,60,61,62,64,65,66,67,68,69,70,85,],[18,33,18,18,18,-17,-18,-19,18,18,18,18,18,18,18,18,18,18,-21,-22,-23,-24,-25,-26,90,]),'INTEGER':([6,27,28,29,30,31,32,35,36,39,48,58,59,60,61,62,64,65,66,67,68,69,70,71,99,116,117,118,119,120,121,122,],[19,19,19,19,-17,-18,-19,19,19,19,19,19,19,19,19,19,19,-21,-22,-23,-24,-25,-26,83,101,124,-45,-46,-47,-48,-49,-50,]),'FLOAT':([6,27,28,29,30,31,32,35,36,39,48,58,59,60,61,62,64,65,66,67,68,69,70,],[20,20,20,20,-17,-18,-19,20,20,20,20,20,20,20,20,20,20,-21,-22,-23,-24,-25,-26,]),'BOOLEAN':([6,27,28,29,30,31,32,35,36,39,48,58,59,60,61,62,64,65,66,67,68,69,70,],[21,21,21,21,-17,-18,-19,46,21,21,21,21,21,21,21,21,21,-21,-22,-23,-24,-25,-26,]),'STRING':([6,27,28,29,30,31,32,35,36,39,48,58,59,60,61,62,64,65,66,67,68,69,70,],[22,22,22,22,-17,-18,-19,22,22,22,22,22,22,22,22,22,22,-21,-22,-23,-24,-25,-26,]),'LBRACKET':([6,27,28,29,30,31,32,35,36,39,48,58,59,60,61,62,64,65,66,67,68,69,70,],[27,27,27,27,-17,-18,-19,27,27,27,27,27,27,27,27,27,27,-21,-22,-23,-24,-25,-26,]),'LPAREN':([7,14,15,16,17,18,19,20,21,22,23,24,25,26,33,40,41,42,46,47,49,51,52,63,77,78,79,80,81,82,95,],[28,35,36,37,39,-7,-8,-9,-10,-11,-12,-13,-14,-20,43,39,39,39,-10,39,39,39,-43,39,39,39,39,39,39,39,-44,]),'EQUAL':([8,50,104,],[30,71,110,]),'PLUS_EQUAL':([8,],[31,]),'CONCAT_EQUAL':([8,],[32,]),'ELSE':([10,91,],[34,-32,]),'ENDLINE':([17,18,19,20,21,22,23,24,25,26,42,52,53,83,95,101,],[38,-7,-8,-9,-10,-11,-12,-13,-14,-20,54,-43,73,88,-44,103,]),'RBRACKET':([18,19,20,21,22,23,24,25,26,40,52,95,],[-7,-8,-9,-10,-11,-12,-13,-14,-20,52,-43,-44,]),'RPAREN':([18,19,20,21,22,23,24,25,26,41,45,46,51,52,55,63,77,78,79,80,81,82,95,105,108,109,112,113,124,],[-7,-8,-9,-10,-11,-12,-13,-14,-20,53,57,-34,72,-43,74,-38,-35,-36,-37,-39,-40,87,-44,111,-51,-53,-52,-54,-55,]),'AND':([18,19,20,22,23,24,25,26,46,47,52,95,],[-7,-8,-9,-11,-12,-13,-14,-20,-10,58,-43,-44,]),'OR':([18,19,20,22,23,24,25,26,46,47,52,95,],[-7,-8,-9,-11,-12,-13,-14,-20,-10,59,-43,-44,]),'XOR':([18,19,20,22,23,24,25,26,46,47,52,95,],[-7,-8,-9,-11,-12,-13,-14,-20,-10,60,-43,-44,]),'BOOLEAN_AND':([18,19,20,22,23,24,25,26,46,47,52,95,],[-7,-8,-9,-11,-12,-13,-14,-20,-10,61,-43,-44,]),'BOOLEAN_OR':([18,19,20,22,23,24,25,26,46,47,52,95,],[-7,-8,-9,-11,-12,-13,-14,-20,-10,62,-43,-44,]),'IS_EQUAL':([18,19,20,21,22,23,24,25,26,49,52,94,95,],[-7,-8,-9,-10,-11,-12,-13,-14,-20,65,-43,65,-44,]),'IS_GREATER_OR_EQUAL':([18,19,20,21,22,23,24,25,26,49,52,94,95,],[-7,-8,-9,-10,-11,-12,-13,-14,-20,66,-43,66,-44,]),'IS_NOT_EQUAL':([18,19,20,21,22,23,24,25,26,49,52,94,95,],[-7,-8,-9,-10,-11,-12,-13,-14,-20,67,-43,67,-44,]),'IS_SMALLER_OR_EQUAL':([18,19,20,21,22,23,24,25,26,49,52,94,95,],[-7,-8,-9,-10,-11,-12,-13,-14,-20,68,-43,68,-44,]),'IS_GREATER':([18,19,20,21,22,23,24,25,26,49,52,94,95,],[-7,-8,-9,-10,-11,-12,-13,-14,-20,69,-43,69,-44,]),'IS_SMALLER':([18,19,20,21,22,23,24,25,26,49,52,94,95,],[-7,-8,-9,-10,-11,-12,-13,-14,-20,70,-43,70,-44,]),'LKEY':([34,57,72,74,87,111,],[44,76,84,85,93,115,]),'NOT':([35,],[48,]),'COLON':([87,],[92,]),'TAB_VERTICAL':([93,],[98,]),'OPERADOR_INCREMENTO':([103,104,],[106,108,]),'OPERADOR_DECREMENTO':([103,104,],[107,109,]),'ADDITION':([114,],[117,]),'SUBTRACTION':([114,],[118,]),'MULTIPLICATION':([114,],[119,]),'DIVISION':([114,],[120,]),'MODULO':([114,],[121,]),'EXPONENTIATION':([114,],[122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,44,76,84,92,98,115,],[1,56,86,89,97,100,123,]),'salida':([0,44,76,84,92,98,115,],[2,2,2,2,2,2,2,]),'asignacion':([0,44,76,84,92,98,115,],[3,3,3,3,3,3,3,]),'funcion':([0,44,76,84,92,98,115,],[4,4,4,4,4,4,4,]),'estructuras_control':([0,44,76,84,92,98,115,],[5,5,5,5,5,5,5,]),'if':([0,44,76,84,92,98,115,],[10,10,10,10,10,10,10,]),'else':([0,44,76,84,92,98,115,],[11,11,11,11,11,11,11,]),'while':([0,44,76,84,92,98,115,],[12,12,12,12,12,12,12,]),'for':([0,44,76,84,92,98,115,],[13,13,13,13,13,13,13,]),'valor':([6,27,28,29,35,36,39,48,58,59,60,61,62,64,],[17,40,41,42,47,49,51,63,77,78,79,80,81,82,]),'estructuras_datos':([6,27,28,29,35,36,39,48,58,59,60,61,62,64,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'funciones':([6,27,28,29,35,36,39,48,58,59,60,61,62,64,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'array':([6,27,28,29,35,36,39,48,58,59,60,61,62,64,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'operador_asignacion':([8,],[29,]),'expresion_logica':([35,],[45,]),'operador_comparacion':([49,94,],[64,99,]),'forma_operacion':([103,],[105,]),'tipo_operador':([114,],[116,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> salida','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',5),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',6),
  ('cuerpo -> funcion','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',7),
  ('cuerpo -> estructuras_control','cuerpo',1,'p_cuerpo','sintacticoPrueba.py',8),
  ('salida -> ECHO valor ENDLINE','salida',3,'p_salida','sintacticoPrueba.py',12),
  ('salida -> PRINT LPAREN valor RPAREN ENDLINE','salida',5,'p_salida_print','sintacticoPrueba.py',17),
  ('valor -> ARGUMENTO','valor',1,'p_valor','sintacticoPrueba.py',20),
  ('valor -> INTEGER','valor',1,'p_valor','sintacticoPrueba.py',21),
  ('valor -> FLOAT','valor',1,'p_valor','sintacticoPrueba.py',22),
  ('valor -> BOOLEAN','valor',1,'p_valor','sintacticoPrueba.py',23),
  ('valor -> STRING','valor',1,'p_valor','sintacticoPrueba.py',24),
  ('valor -> VARIABLE','valor',1,'p_valor','sintacticoPrueba.py',25),
  ('valor -> estructuras_datos','valor',1,'p_valor','sintacticoPrueba.py',26),
  ('valor -> funciones','valor',1,'p_valor','sintacticoPrueba.py',27),
  ('funcion -> FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY','funcion',8,'p_funcion','sintacticoPrueba.py',30),
  ('asignacion -> VARIABLE operador_asignacion valor ENDLINE','asignacion',4,'p_asignacion','sintacticoPrueba.py',33),
  ('operador_asignacion -> EQUAL','operador_asignacion',1,'p_operador_asignacion','sintacticoPrueba.py',36),
  ('operador_asignacion -> PLUS_EQUAL','operador_asignacion',1,'p_operador_asignacion','sintacticoPrueba.py',37),
  ('operador_asignacion -> CONCAT_EQUAL','operador_asignacion',1,'p_operador_asignacion','sintacticoPrueba.py',38),
  ('estructuras_datos -> array','estructuras_datos',1,'p_estructuras_datos','sintacticoPrueba.py',41),
  ('operador_comparacion -> IS_EQUAL','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',44),
  ('operador_comparacion -> IS_GREATER_OR_EQUAL','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',45),
  ('operador_comparacion -> IS_NOT_EQUAL','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',46),
  ('operador_comparacion -> IS_SMALLER_OR_EQUAL','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',47),
  ('operador_comparacion -> IS_GREATER','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',48),
  ('operador_comparacion -> IS_SMALLER','operador_comparacion',1,'p_operador_comparacion','sintacticoPrueba.py',49),
  ('operacion_comparacion -> VARIABLE operador_comparacion VARIABLE','operacion_comparacion',3,'p_operacion_comparacion','sintacticoPrueba.py',54),
  ('estructuras_control -> if','estructuras_control',1,'p_estructuras_control','sintacticoPrueba.py',57),
  ('estructuras_control -> else','estructuras_control',1,'p_estructuras_control','sintacticoPrueba.py',58),
  ('estructuras_control -> while','estructuras_control',1,'p_estructuras_control','sintacticoPrueba.py',59),
  ('estructuras_control -> for','estructuras_control',1,'p_estructuras_control','sintacticoPrueba.py',60),
  ('if -> IF LPAREN expresion_logica RPAREN LKEY cuerpo RKEY','if',7,'p_if','sintacticoPrueba.py',64),
  ('else -> if ELSE LKEY cuerpo RKEY','else',5,'p_else','sintacticoPrueba.py',67),
  ('expresion_logica -> BOOLEAN','expresion_logica',1,'p_expresion_logica','sintacticoPrueba.py',70),
  ('expresion_logica -> valor AND valor','expresion_logica',3,'p_expresion_logica','sintacticoPrueba.py',71),
  ('expresion_logica -> valor OR valor','expresion_logica',3,'p_expresion_logica','sintacticoPrueba.py',72),
  ('expresion_logica -> valor XOR valor','expresion_logica',3,'p_expresion_logica','sintacticoPrueba.py',73),
  ('expresion_logica -> NOT valor','expresion_logica',2,'p_expresion_logica','sintacticoPrueba.py',74),
  ('expresion_logica -> valor BOOLEAN_AND valor','expresion_logica',3,'p_expresion_logica','sintacticoPrueba.py',75),
  ('expresion_logica -> valor BOOLEAN_OR valor','expresion_logica',3,'p_expresion_logica','sintacticoPrueba.py',76),
  ('while -> WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo','while',8,'p_while_v1','sintacticoPrueba.py',81),
  ('while -> WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY','while',10,'p_while_v2','sintacticoPrueba.py',84),
  ('array -> LBRACKET valor RBRACKET','array',3,'p_array','sintacticoPrueba.py',87),
  ('funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY','funciones',7,'p_funciones','sintacticoPrueba.py',90),
  ('tipo_operador -> ADDITION','tipo_operador',1,'p_tipo_operador','sintacticoPrueba.py',94),
  ('tipo_operador -> SUBTRACTION','tipo_operador',1,'p_tipo_operador','sintacticoPrueba.py',95),
  ('tipo_operador -> MULTIPLICATION','tipo_operador',1,'p_tipo_operador','sintacticoPrueba.py',96),
  ('tipo_operador -> DIVISION','tipo_operador',1,'p_tipo_operador','sintacticoPrueba.py',97),
  ('tipo_operador -> MODULO','tipo_operador',1,'p_tipo_operador','sintacticoPrueba.py',98),
  ('tipo_operador -> EXPONENTIATION','tipo_operador',1,'p_tipo_operador','sintacticoPrueba.py',99),
  ('forma_operacion -> VARIABLE OPERADOR_INCREMENTO','forma_operacion',2,'p_forma_operacion','sintacticoPrueba.py',104),
  ('forma_operacion -> OPERADOR_INCREMENTO VARIABLE','forma_operacion',2,'p_forma_operacion','sintacticoPrueba.py',105),
  ('forma_operacion -> VARIABLE OPERADOR_DECREMENTO','forma_operacion',2,'p_forma_operacion','sintacticoPrueba.py',106),
  ('forma_operacion -> OPERADOR_DECREMENTO VARIABLE','forma_operacion',2,'p_forma_operacion','sintacticoPrueba.py',107),
  ('forma_operacion -> VARIABLE EQUAL VARIABLE tipo_operador INTEGER','forma_operacion',5,'p_forma_operacion','sintacticoPrueba.py',108),
  ('for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY','for',15,'p_for','sintacticoPrueba.py',113),
]
