Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADVANCE_PAGE
    CLOSE_TAG
    COMILLA_DOBLE
    ESCAPE
    FSCANF
    IDENTITY
    NEGATION
    NEW
    NOT
    NULL
    OPEN_TAG
    OPERADOR_CONCATENACION
    PUSH
    READLINE
    SETSIZE
    SINTAXIS_ARRAY
    SPLEDOUBLYLINKEDLIST
    SPLFIXEDARRAY
    WHITESPACE

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> salida
Rule 2     cuerpo -> asignacion
Rule 3     cuerpo -> funcion
Rule 4     cuerpo -> estructuras_control
Rule 5     salida -> ECHO valor ENDLINE
Rule 6     salida -> PRINT LPAREN valor RPAREN ENDLINE
Rule 7     valor -> ARGUMENTO
Rule 8     valor -> INTEGER
Rule 9     valor -> FLOAT
Rule 10    valor -> BOOLEAN
Rule 11    valor -> STRING
Rule 12    valor -> VARIABLE
Rule 13    valor -> estructuras_datos
Rule 14    valor -> funciones
Rule 15    funcion -> FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY
Rule 16    asignacion -> VARIABLE operador_asignacion valor ENDLINE
Rule 17    asignacion -> VARIABLE operador_asignacion expresion ENDLINE
Rule 18    operador_asignacion -> EQUAL
Rule 19    operador_asignacion -> PLUS_EQUAL
Rule 20    operador_asignacion -> CONCAT_EQUAL
Rule 21    estructuras_datos -> array
Rule 22    operador_comparacion -> IS_EQUAL
Rule 23    operador_comparacion -> IS_GREATER_OR_EQUAL
Rule 24    operador_comparacion -> IS_NOT_EQUAL
Rule 25    operador_comparacion -> IS_SMALLER_OR_EQUAL
Rule 26    operador_comparacion -> IS_GREATER
Rule 27    operador_comparacion -> IS_SMALLER
Rule 28    operacion_comparacion -> VARIABLE operador_comparacion VARIABLE
Rule 29    estructuras_control -> if
Rule 30    estructuras_control -> else
Rule 31    estructuras_control -> while
Rule 32    estructuras_control -> for
Rule 33    if -> IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY
Rule 34    else -> if ELSE LKEY cuerpo RKEY
Rule 35    expresion -> expresiones_logicas
Rule 36    expresion -> expresiones_aritmeticas
Rule 37    expresion_logica -> BOOLEAN
Rule 38    expresion_logica -> valor operador_comparacion valor
Rule 39    expresion_logica -> valor operador_logico valor
Rule 40    expresiones_logicas -> expresion_logica
Rule 41    expresiones_logicas -> expresion_logica operador_comparacion expresiones_logicas
Rule 42    operador_aritmetico -> ADDITION
Rule 43    operador_aritmetico -> SUBTRACTION
Rule 44    operador_aritmetico -> MULTIPLICATION
Rule 45    operador_aritmetico -> DIVISION
Rule 46    operador_aritmetico -> MODULO
Rule 47    operador_aritmetico -> EXPONENTIATION
Rule 48    operador_logico -> BOOLEAN_AND
Rule 49    operador_logico -> BOOLEAN_OR
Rule 50    operador_logico -> AND
Rule 51    operador_logico -> OR
Rule 52    operador_logico -> XOR
Rule 53    expresion_aritmetica -> valor operador_aritmetico valor
Rule 54    expresiones_aritmeticas -> expresion_aritmetica
Rule 55    expresiones_aritmeticas -> expresion_aritmetica operador_aritmetico expresiones_aritmeticas
Rule 56    lectura -> FGETS LPAREN VARIABLE COMA INTEGER RPAREN ENDLINE
Rule 57    while -> WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo
Rule 58    while -> WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY
Rule 59    array -> LBRACKET valor RBRACKET
Rule 60    funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY
Rule 61    tipo_operador -> ADDITION
Rule 62    tipo_operador -> SUBTRACTION
Rule 63    tipo_operador -> MULTIPLICATION
Rule 64    tipo_operador -> DIVISION
Rule 65    tipo_operador -> MODULO
Rule 66    tipo_operador -> EXPONENTIATION
Rule 67    forma_operacion -> VARIABLE OPERADOR_INCREMENTO
Rule 68    forma_operacion -> OPERADOR_INCREMENTO VARIABLE
Rule 69    forma_operacion -> VARIABLE OPERADOR_DECREMENTO
Rule 70    forma_operacion -> OPERADOR_DECREMENTO VARIABLE
Rule 71    forma_operacion -> VARIABLE EQUAL VARIABLE tipo_operador INTEGER
Rule 72    for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

Terminals, with rules where they appear

ADDITION             : 42 61
ADVANCE_PAGE         : 
AND                  : 50
ARGUMENTO            : 7 15 15
BOOLEAN              : 10 37
BOOLEAN_AND          : 48
BOOLEAN_OR           : 49
CLOSE_TAG            : 
COLON                : 57
COMA                 : 56
COMILLA_DOBLE        : 
CONCAT_EQUAL         : 20
DIVISION             : 45 64
ECHO                 : 5
ELSE                 : 34
ENDLINE              : 5 6 16 17 56 72 72
EQUAL                : 18 71 72
ESCAPE               : 
EXPONENTIATION       : 47 66
FGETS                : 56
FLOAT                : 9
FOR                  : 72
FSCANF               : 
FUNCTION             : 15
IDENTITY             : 
IF                   : 33
INTEGER              : 8 56 71 72 72
IS_EQUAL             : 22
IS_GREATER           : 26
IS_GREATER_OR_EQUAL  : 23
IS_NOT_EQUAL         : 24
IS_SMALLER           : 27
IS_SMALLER_OR_EQUAL  : 25
LBRACKET             : 59
LKEY                 : 15 33 34 58 60 72
LPAREN               : 6 15 33 56 57 58 60 72
MODULO               : 46 65
MULTIPLICATION       : 44 63
NEGATION             : 
NEW                  : 
NOT                  : 
NULL                 : 
OPEN_TAG             : 
OPERADOR_CONCATENACION : 
OPERADOR_DECREMENTO  : 69 70
OPERADOR_INCREMENTO  : 67 68
OR                   : 51
PLUS_EQUAL           : 19
PRINT                : 6
PUSH                 : 
RBRACKET             : 59
READLINE             : 
RKEY                 : 15 33 34 58 60 72
RPAREN               : 6 15 33 56 57 58 60 72
SETSIZE              : 
SINTAXIS_ARRAY       : 
SPLEDOUBLYLINKEDLIST : 
SPLFIXEDARRAY        : 
STRING               : 11
SUBTRACTION          : 43 62
TAB_VERTICAL         : 58
VARIABLE             : 12 15 16 17 28 28 56 67 68 69 70 71 71 72 72
WHILE                : 57 58
WHITESPACE           : 
XOR                  : 52
error                : 

Nonterminals, with rules where they appear

array                : 21
asignacion           : 2
cuerpo               : 33 34 57 58 60 72 0
else                 : 30
estructuras_control  : 4
estructuras_datos    : 13
expresion            : 17
expresion_aritmetica : 54 55
expresion_logica     : 40 41
expresiones_aritmeticas : 36 55
expresiones_logicas  : 33 35 41
for                  : 32
forma_operacion      : 72
funcion              : 3
funciones            : 14
if                   : 29 34
lectura              : 
operacion_comparacion : 
operador_aritmetico  : 53 55
operador_asignacion  : 16 17
operador_comparacion : 28 38 41 57 58 72
operador_logico      : 39
salida               : 1
tipo_operador        : 71
valor                : 5 6 16 38 38 39 39 53 53 57 57 58 58 59 60 60
while                : 31

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . salida
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . funcion
    (4) cuerpo -> . estructuras_control
    (5) salida -> . ECHO valor ENDLINE
    (6) salida -> . PRINT LPAREN valor RPAREN ENDLINE
    (16) asignacion -> . VARIABLE operador_asignacion valor ENDLINE
    (17) asignacion -> . VARIABLE operador_asignacion expresion ENDLINE
    (15) funcion -> . FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY
    (29) estructuras_control -> . if
    (30) estructuras_control -> . else
    (31) estructuras_control -> . while
    (32) estructuras_control -> . for
    (33) if -> . IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY
    (34) else -> . if ELSE LKEY cuerpo RKEY
    (57) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo
    (58) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY
    (72) for -> . FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    ECHO            shift and go to state 6
    PRINT           shift and go to state 7
    VARIABLE        shift and go to state 8
    FUNCTION        shift and go to state 9
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    cuerpo                         shift and go to state 1
    salida                         shift and go to state 2
    asignacion                     shift and go to state 3
    funcion                        shift and go to state 4
    estructuras_control            shift and go to state 5
    if                             shift and go to state 10
    else                           shift and go to state 11
    while                          shift and go to state 12
    for                            shift and go to state 13

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> salida .

    $end            reduce using rule 1 (cuerpo -> salida .)
    RKEY            reduce using rule 1 (cuerpo -> salida .)


state 3

    (2) cuerpo -> asignacion .

    $end            reduce using rule 2 (cuerpo -> asignacion .)
    RKEY            reduce using rule 2 (cuerpo -> asignacion .)


state 4

    (3) cuerpo -> funcion .

    $end            reduce using rule 3 (cuerpo -> funcion .)
    RKEY            reduce using rule 3 (cuerpo -> funcion .)


state 5

    (4) cuerpo -> estructuras_control .

    $end            reduce using rule 4 (cuerpo -> estructuras_control .)
    RKEY            reduce using rule 4 (cuerpo -> estructuras_control .)


state 6

    (5) salida -> ECHO . valor ENDLINE
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (59) array -> . LBRACKET valor RBRACKET

    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    valor                          shift and go to state 17
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    array                          shift and go to state 26

state 7

    (6) salida -> PRINT . LPAREN valor RPAREN ENDLINE

    LPAREN          shift and go to state 28


state 8

    (16) asignacion -> VARIABLE . operador_asignacion valor ENDLINE
    (17) asignacion -> VARIABLE . operador_asignacion expresion ENDLINE
    (18) operador_asignacion -> . EQUAL
    (19) operador_asignacion -> . PLUS_EQUAL
    (20) operador_asignacion -> . CONCAT_EQUAL

    EQUAL           shift and go to state 30
    PLUS_EQUAL      shift and go to state 31
    CONCAT_EQUAL    shift and go to state 32

    operador_asignacion            shift and go to state 29

state 9

    (15) funcion -> FUNCTION . ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY

    ARGUMENTO       shift and go to state 33


state 10

    (29) estructuras_control -> if .
    (34) else -> if . ELSE LKEY cuerpo RKEY

    $end            reduce using rule 29 (estructuras_control -> if .)
    RKEY            reduce using rule 29 (estructuras_control -> if .)
    ELSE            shift and go to state 34


state 11

    (30) estructuras_control -> else .

    $end            reduce using rule 30 (estructuras_control -> else .)
    RKEY            reduce using rule 30 (estructuras_control -> else .)


state 12

    (31) estructuras_control -> while .

    $end            reduce using rule 31 (estructuras_control -> while .)
    RKEY            reduce using rule 31 (estructuras_control -> while .)


state 13

    (32) estructuras_control -> for .

    $end            reduce using rule 32 (estructuras_control -> for .)
    RKEY            reduce using rule 32 (estructuras_control -> for .)


state 14

    (33) if -> IF . LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY

    LPAREN          shift and go to state 35


state 15

    (57) while -> WHILE . LPAREN valor operador_comparacion valor RPAREN COLON cuerpo
    (58) while -> WHILE . LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY

    LPAREN          shift and go to state 36


state 16

    (72) for -> FOR . LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    LPAREN          shift and go to state 37


state 17

    (5) salida -> ECHO valor . ENDLINE
    (60) funciones -> valor . LPAREN valor RPAREN LKEY cuerpo RKEY

    ENDLINE         shift and go to state 38
    LPAREN          shift and go to state 39


state 18

    (7) valor -> ARGUMENTO .

    ENDLINE         reduce using rule 7 (valor -> ARGUMENTO .)
    LPAREN          reduce using rule 7 (valor -> ARGUMENTO .)
    RBRACKET        reduce using rule 7 (valor -> ARGUMENTO .)
    RPAREN          reduce using rule 7 (valor -> ARGUMENTO .)
    IS_EQUAL        reduce using rule 7 (valor -> ARGUMENTO .)
    IS_GREATER_OR_EQUAL reduce using rule 7 (valor -> ARGUMENTO .)
    IS_NOT_EQUAL    reduce using rule 7 (valor -> ARGUMENTO .)
    IS_SMALLER_OR_EQUAL reduce using rule 7 (valor -> ARGUMENTO .)
    IS_GREATER      reduce using rule 7 (valor -> ARGUMENTO .)
    IS_SMALLER      reduce using rule 7 (valor -> ARGUMENTO .)
    BOOLEAN_AND     reduce using rule 7 (valor -> ARGUMENTO .)
    BOOLEAN_OR      reduce using rule 7 (valor -> ARGUMENTO .)
    AND             reduce using rule 7 (valor -> ARGUMENTO .)
    OR              reduce using rule 7 (valor -> ARGUMENTO .)
    XOR             reduce using rule 7 (valor -> ARGUMENTO .)
    ADDITION        reduce using rule 7 (valor -> ARGUMENTO .)
    SUBTRACTION     reduce using rule 7 (valor -> ARGUMENTO .)
    MULTIPLICATION  reduce using rule 7 (valor -> ARGUMENTO .)
    DIVISION        reduce using rule 7 (valor -> ARGUMENTO .)
    MODULO          reduce using rule 7 (valor -> ARGUMENTO .)
    EXPONENTIATION  reduce using rule 7 (valor -> ARGUMENTO .)


state 19

    (8) valor -> INTEGER .

    ENDLINE         reduce using rule 8 (valor -> INTEGER .)
    LPAREN          reduce using rule 8 (valor -> INTEGER .)
    RBRACKET        reduce using rule 8 (valor -> INTEGER .)
    RPAREN          reduce using rule 8 (valor -> INTEGER .)
    IS_EQUAL        reduce using rule 8 (valor -> INTEGER .)
    IS_GREATER_OR_EQUAL reduce using rule 8 (valor -> INTEGER .)
    IS_NOT_EQUAL    reduce using rule 8 (valor -> INTEGER .)
    IS_SMALLER_OR_EQUAL reduce using rule 8 (valor -> INTEGER .)
    IS_GREATER      reduce using rule 8 (valor -> INTEGER .)
    IS_SMALLER      reduce using rule 8 (valor -> INTEGER .)
    BOOLEAN_AND     reduce using rule 8 (valor -> INTEGER .)
    BOOLEAN_OR      reduce using rule 8 (valor -> INTEGER .)
    AND             reduce using rule 8 (valor -> INTEGER .)
    OR              reduce using rule 8 (valor -> INTEGER .)
    XOR             reduce using rule 8 (valor -> INTEGER .)
    ADDITION        reduce using rule 8 (valor -> INTEGER .)
    SUBTRACTION     reduce using rule 8 (valor -> INTEGER .)
    MULTIPLICATION  reduce using rule 8 (valor -> INTEGER .)
    DIVISION        reduce using rule 8 (valor -> INTEGER .)
    MODULO          reduce using rule 8 (valor -> INTEGER .)
    EXPONENTIATION  reduce using rule 8 (valor -> INTEGER .)


state 20

    (9) valor -> FLOAT .

    ENDLINE         reduce using rule 9 (valor -> FLOAT .)
    LPAREN          reduce using rule 9 (valor -> FLOAT .)
    RBRACKET        reduce using rule 9 (valor -> FLOAT .)
    RPAREN          reduce using rule 9 (valor -> FLOAT .)
    IS_EQUAL        reduce using rule 9 (valor -> FLOAT .)
    IS_GREATER_OR_EQUAL reduce using rule 9 (valor -> FLOAT .)
    IS_NOT_EQUAL    reduce using rule 9 (valor -> FLOAT .)
    IS_SMALLER_OR_EQUAL reduce using rule 9 (valor -> FLOAT .)
    IS_GREATER      reduce using rule 9 (valor -> FLOAT .)
    IS_SMALLER      reduce using rule 9 (valor -> FLOAT .)
    BOOLEAN_AND     reduce using rule 9 (valor -> FLOAT .)
    BOOLEAN_OR      reduce using rule 9 (valor -> FLOAT .)
    AND             reduce using rule 9 (valor -> FLOAT .)
    OR              reduce using rule 9 (valor -> FLOAT .)
    XOR             reduce using rule 9 (valor -> FLOAT .)
    ADDITION        reduce using rule 9 (valor -> FLOAT .)
    SUBTRACTION     reduce using rule 9 (valor -> FLOAT .)
    MULTIPLICATION  reduce using rule 9 (valor -> FLOAT .)
    DIVISION        reduce using rule 9 (valor -> FLOAT .)
    MODULO          reduce using rule 9 (valor -> FLOAT .)
    EXPONENTIATION  reduce using rule 9 (valor -> FLOAT .)


state 21

    (10) valor -> BOOLEAN .

    ENDLINE         reduce using rule 10 (valor -> BOOLEAN .)
    LPAREN          reduce using rule 10 (valor -> BOOLEAN .)
    RBRACKET        reduce using rule 10 (valor -> BOOLEAN .)
    RPAREN          reduce using rule 10 (valor -> BOOLEAN .)
    IS_EQUAL        reduce using rule 10 (valor -> BOOLEAN .)
    IS_GREATER_OR_EQUAL reduce using rule 10 (valor -> BOOLEAN .)
    IS_NOT_EQUAL    reduce using rule 10 (valor -> BOOLEAN .)
    IS_SMALLER_OR_EQUAL reduce using rule 10 (valor -> BOOLEAN .)
    IS_GREATER      reduce using rule 10 (valor -> BOOLEAN .)
    IS_SMALLER      reduce using rule 10 (valor -> BOOLEAN .)
    ADDITION        reduce using rule 10 (valor -> BOOLEAN .)
    SUBTRACTION     reduce using rule 10 (valor -> BOOLEAN .)
    MULTIPLICATION  reduce using rule 10 (valor -> BOOLEAN .)
    DIVISION        reduce using rule 10 (valor -> BOOLEAN .)
    MODULO          reduce using rule 10 (valor -> BOOLEAN .)
    EXPONENTIATION  reduce using rule 10 (valor -> BOOLEAN .)


state 22

    (11) valor -> STRING .

    ENDLINE         reduce using rule 11 (valor -> STRING .)
    LPAREN          reduce using rule 11 (valor -> STRING .)
    RBRACKET        reduce using rule 11 (valor -> STRING .)
    RPAREN          reduce using rule 11 (valor -> STRING .)
    IS_EQUAL        reduce using rule 11 (valor -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 11 (valor -> STRING .)
    IS_NOT_EQUAL    reduce using rule 11 (valor -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 11 (valor -> STRING .)
    IS_GREATER      reduce using rule 11 (valor -> STRING .)
    IS_SMALLER      reduce using rule 11 (valor -> STRING .)
    BOOLEAN_AND     reduce using rule 11 (valor -> STRING .)
    BOOLEAN_OR      reduce using rule 11 (valor -> STRING .)
    AND             reduce using rule 11 (valor -> STRING .)
    OR              reduce using rule 11 (valor -> STRING .)
    XOR             reduce using rule 11 (valor -> STRING .)
    ADDITION        reduce using rule 11 (valor -> STRING .)
    SUBTRACTION     reduce using rule 11 (valor -> STRING .)
    MULTIPLICATION  reduce using rule 11 (valor -> STRING .)
    DIVISION        reduce using rule 11 (valor -> STRING .)
    MODULO          reduce using rule 11 (valor -> STRING .)
    EXPONENTIATION  reduce using rule 11 (valor -> STRING .)


state 23

    (12) valor -> VARIABLE .

    ENDLINE         reduce using rule 12 (valor -> VARIABLE .)
    LPAREN          reduce using rule 12 (valor -> VARIABLE .)
    RBRACKET        reduce using rule 12 (valor -> VARIABLE .)
    RPAREN          reduce using rule 12 (valor -> VARIABLE .)
    IS_EQUAL        reduce using rule 12 (valor -> VARIABLE .)
    IS_GREATER_OR_EQUAL reduce using rule 12 (valor -> VARIABLE .)
    IS_NOT_EQUAL    reduce using rule 12 (valor -> VARIABLE .)
    IS_SMALLER_OR_EQUAL reduce using rule 12 (valor -> VARIABLE .)
    IS_GREATER      reduce using rule 12 (valor -> VARIABLE .)
    IS_SMALLER      reduce using rule 12 (valor -> VARIABLE .)
    BOOLEAN_AND     reduce using rule 12 (valor -> VARIABLE .)
    BOOLEAN_OR      reduce using rule 12 (valor -> VARIABLE .)
    AND             reduce using rule 12 (valor -> VARIABLE .)
    OR              reduce using rule 12 (valor -> VARIABLE .)
    XOR             reduce using rule 12 (valor -> VARIABLE .)
    ADDITION        reduce using rule 12 (valor -> VARIABLE .)
    SUBTRACTION     reduce using rule 12 (valor -> VARIABLE .)
    MULTIPLICATION  reduce using rule 12 (valor -> VARIABLE .)
    DIVISION        reduce using rule 12 (valor -> VARIABLE .)
    MODULO          reduce using rule 12 (valor -> VARIABLE .)
    EXPONENTIATION  reduce using rule 12 (valor -> VARIABLE .)


state 24

    (13) valor -> estructuras_datos .

    ENDLINE         reduce using rule 13 (valor -> estructuras_datos .)
    LPAREN          reduce using rule 13 (valor -> estructuras_datos .)
    RBRACKET        reduce using rule 13 (valor -> estructuras_datos .)
    RPAREN          reduce using rule 13 (valor -> estructuras_datos .)
    IS_EQUAL        reduce using rule 13 (valor -> estructuras_datos .)
    IS_GREATER_OR_EQUAL reduce using rule 13 (valor -> estructuras_datos .)
    IS_NOT_EQUAL    reduce using rule 13 (valor -> estructuras_datos .)
    IS_SMALLER_OR_EQUAL reduce using rule 13 (valor -> estructuras_datos .)
    IS_GREATER      reduce using rule 13 (valor -> estructuras_datos .)
    IS_SMALLER      reduce using rule 13 (valor -> estructuras_datos .)
    BOOLEAN_AND     reduce using rule 13 (valor -> estructuras_datos .)
    BOOLEAN_OR      reduce using rule 13 (valor -> estructuras_datos .)
    AND             reduce using rule 13 (valor -> estructuras_datos .)
    OR              reduce using rule 13 (valor -> estructuras_datos .)
    XOR             reduce using rule 13 (valor -> estructuras_datos .)
    ADDITION        reduce using rule 13 (valor -> estructuras_datos .)
    SUBTRACTION     reduce using rule 13 (valor -> estructuras_datos .)
    MULTIPLICATION  reduce using rule 13 (valor -> estructuras_datos .)
    DIVISION        reduce using rule 13 (valor -> estructuras_datos .)
    MODULO          reduce using rule 13 (valor -> estructuras_datos .)
    EXPONENTIATION  reduce using rule 13 (valor -> estructuras_datos .)


state 25

    (14) valor -> funciones .

    ENDLINE         reduce using rule 14 (valor -> funciones .)
    LPAREN          reduce using rule 14 (valor -> funciones .)
    RBRACKET        reduce using rule 14 (valor -> funciones .)
    RPAREN          reduce using rule 14 (valor -> funciones .)
    IS_EQUAL        reduce using rule 14 (valor -> funciones .)
    IS_GREATER_OR_EQUAL reduce using rule 14 (valor -> funciones .)
    IS_NOT_EQUAL    reduce using rule 14 (valor -> funciones .)
    IS_SMALLER_OR_EQUAL reduce using rule 14 (valor -> funciones .)
    IS_GREATER      reduce using rule 14 (valor -> funciones .)
    IS_SMALLER      reduce using rule 14 (valor -> funciones .)
    BOOLEAN_AND     reduce using rule 14 (valor -> funciones .)
    BOOLEAN_OR      reduce using rule 14 (valor -> funciones .)
    AND             reduce using rule 14 (valor -> funciones .)
    OR              reduce using rule 14 (valor -> funciones .)
    XOR             reduce using rule 14 (valor -> funciones .)
    ADDITION        reduce using rule 14 (valor -> funciones .)
    SUBTRACTION     reduce using rule 14 (valor -> funciones .)
    MULTIPLICATION  reduce using rule 14 (valor -> funciones .)
    DIVISION        reduce using rule 14 (valor -> funciones .)
    MODULO          reduce using rule 14 (valor -> funciones .)
    EXPONENTIATION  reduce using rule 14 (valor -> funciones .)


state 26

    (21) estructuras_datos -> array .

    ENDLINE         reduce using rule 21 (estructuras_datos -> array .)
    LPAREN          reduce using rule 21 (estructuras_datos -> array .)
    RBRACKET        reduce using rule 21 (estructuras_datos -> array .)
    RPAREN          reduce using rule 21 (estructuras_datos -> array .)
    IS_EQUAL        reduce using rule 21 (estructuras_datos -> array .)
    IS_GREATER_OR_EQUAL reduce using rule 21 (estructuras_datos -> array .)
    IS_NOT_EQUAL    reduce using rule 21 (estructuras_datos -> array .)
    IS_SMALLER_OR_EQUAL reduce using rule 21 (estructuras_datos -> array .)
    IS_GREATER      reduce using rule 21 (estructuras_datos -> array .)
    IS_SMALLER      reduce using rule 21 (estructuras_datos -> array .)
    BOOLEAN_AND     reduce using rule 21 (estructuras_datos -> array .)
    BOOLEAN_OR      reduce using rule 21 (estructuras_datos -> array .)
    AND             reduce using rule 21 (estructuras_datos -> array .)
    OR              reduce using rule 21 (estructuras_datos -> array .)
    XOR             reduce using rule 21 (estructuras_datos -> array .)
    ADDITION        reduce using rule 21 (estructuras_datos -> array .)
    SUBTRACTION     reduce using rule 21 (estructuras_datos -> array .)
    MULTIPLICATION  reduce using rule 21 (estructuras_datos -> array .)
    DIVISION        reduce using rule 21 (estructuras_datos -> array .)
    MODULO          reduce using rule 21 (estructuras_datos -> array .)
    EXPONENTIATION  reduce using rule 21 (estructuras_datos -> array .)


state 27

    (59) array -> LBRACKET . valor RBRACKET
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (59) array -> . LBRACKET valor RBRACKET

    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    valor                          shift and go to state 40
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    array                          shift and go to state 26

state 28

    (6) salida -> PRINT LPAREN . valor RPAREN ENDLINE
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (59) array -> . LBRACKET valor RBRACKET

    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    valor                          shift and go to state 41
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    array                          shift and go to state 26

state 29

    (16) asignacion -> VARIABLE operador_asignacion . valor ENDLINE
    (17) asignacion -> VARIABLE operador_asignacion . expresion ENDLINE
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (35) expresion -> . expresiones_logicas
    (36) expresion -> . expresiones_aritmeticas
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (40) expresiones_logicas -> . expresion_logica
    (41) expresiones_logicas -> . expresion_logica operador_comparacion expresiones_logicas
    (54) expresiones_aritmeticas -> . expresion_aritmetica
    (55) expresiones_aritmeticas -> . expresion_aritmetica operador_aritmetico expresiones_aritmeticas
    (59) array -> . LBRACKET valor RBRACKET
    (37) expresion_logica -> . BOOLEAN
    (38) expresion_logica -> . valor operador_comparacion valor
    (39) expresion_logica -> . valor operador_logico valor
    (53) expresion_aritmetica -> . valor operador_aritmetico valor

    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 44
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    valor                          shift and go to state 42
    expresion                      shift and go to state 43
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    expresiones_logicas            shift and go to state 45
    expresiones_aritmeticas        shift and go to state 46
    array                          shift and go to state 26
    expresion_logica               shift and go to state 47
    expresion_aritmetica           shift and go to state 48

state 30

    (18) operador_asignacion -> EQUAL .

    ARGUMENTO       reduce using rule 18 (operador_asignacion -> EQUAL .)
    INTEGER         reduce using rule 18 (operador_asignacion -> EQUAL .)
    FLOAT           reduce using rule 18 (operador_asignacion -> EQUAL .)
    BOOLEAN         reduce using rule 18 (operador_asignacion -> EQUAL .)
    STRING          reduce using rule 18 (operador_asignacion -> EQUAL .)
    VARIABLE        reduce using rule 18 (operador_asignacion -> EQUAL .)
    LBRACKET        reduce using rule 18 (operador_asignacion -> EQUAL .)


state 31

    (19) operador_asignacion -> PLUS_EQUAL .

    ARGUMENTO       reduce using rule 19 (operador_asignacion -> PLUS_EQUAL .)
    INTEGER         reduce using rule 19 (operador_asignacion -> PLUS_EQUAL .)
    FLOAT           reduce using rule 19 (operador_asignacion -> PLUS_EQUAL .)
    BOOLEAN         reduce using rule 19 (operador_asignacion -> PLUS_EQUAL .)
    STRING          reduce using rule 19 (operador_asignacion -> PLUS_EQUAL .)
    VARIABLE        reduce using rule 19 (operador_asignacion -> PLUS_EQUAL .)
    LBRACKET        reduce using rule 19 (operador_asignacion -> PLUS_EQUAL .)


state 32

    (20) operador_asignacion -> CONCAT_EQUAL .

    ARGUMENTO       reduce using rule 20 (operador_asignacion -> CONCAT_EQUAL .)
    INTEGER         reduce using rule 20 (operador_asignacion -> CONCAT_EQUAL .)
    FLOAT           reduce using rule 20 (operador_asignacion -> CONCAT_EQUAL .)
    BOOLEAN         reduce using rule 20 (operador_asignacion -> CONCAT_EQUAL .)
    STRING          reduce using rule 20 (operador_asignacion -> CONCAT_EQUAL .)
    VARIABLE        reduce using rule 20 (operador_asignacion -> CONCAT_EQUAL .)
    LBRACKET        reduce using rule 20 (operador_asignacion -> CONCAT_EQUAL .)


state 33

    (15) funcion -> FUNCTION ARGUMENTO . LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY

    LPAREN          shift and go to state 49


state 34

    (34) else -> if ELSE . LKEY cuerpo RKEY

    LKEY            shift and go to state 50


state 35

    (33) if -> IF LPAREN . expresiones_logicas RPAREN LKEY cuerpo RKEY
    (40) expresiones_logicas -> . expresion_logica
    (41) expresiones_logicas -> . expresion_logica operador_comparacion expresiones_logicas
    (37) expresion_logica -> . BOOLEAN
    (38) expresion_logica -> . valor operador_comparacion valor
    (39) expresion_logica -> . valor operador_logico valor
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (59) array -> . LBRACKET valor RBRACKET

    BOOLEAN         shift and go to state 52
    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    expresiones_logicas            shift and go to state 51
    expresion_logica               shift and go to state 47
    valor                          shift and go to state 53
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    array                          shift and go to state 26

state 36

    (57) while -> WHILE LPAREN . valor operador_comparacion valor RPAREN COLON cuerpo
    (58) while -> WHILE LPAREN . valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (59) array -> . LBRACKET valor RBRACKET

    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    valor                          shift and go to state 54
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    array                          shift and go to state 26

state 37

    (72) for -> FOR LPAREN . VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    VARIABLE        shift and go to state 55


state 38

    (5) salida -> ECHO valor ENDLINE .

    $end            reduce using rule 5 (salida -> ECHO valor ENDLINE .)
    RKEY            reduce using rule 5 (salida -> ECHO valor ENDLINE .)


state 39

    (60) funciones -> valor LPAREN . valor RPAREN LKEY cuerpo RKEY
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (59) array -> . LBRACKET valor RBRACKET

    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    valor                          shift and go to state 56
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    array                          shift and go to state 26

state 40

    (59) array -> LBRACKET valor . RBRACKET
    (60) funciones -> valor . LPAREN valor RPAREN LKEY cuerpo RKEY

    RBRACKET        shift and go to state 57
    LPAREN          shift and go to state 39


state 41

    (6) salida -> PRINT LPAREN valor . RPAREN ENDLINE
    (60) funciones -> valor . LPAREN valor RPAREN LKEY cuerpo RKEY

    RPAREN          shift and go to state 58
    LPAREN          shift and go to state 39


state 42

    (16) asignacion -> VARIABLE operador_asignacion valor . ENDLINE
    (60) funciones -> valor . LPAREN valor RPAREN LKEY cuerpo RKEY
    (38) expresion_logica -> valor . operador_comparacion valor
    (39) expresion_logica -> valor . operador_logico valor
    (53) expresion_aritmetica -> valor . operador_aritmetico valor
    (22) operador_comparacion -> . IS_EQUAL
    (23) operador_comparacion -> . IS_GREATER_OR_EQUAL
    (24) operador_comparacion -> . IS_NOT_EQUAL
    (25) operador_comparacion -> . IS_SMALLER_OR_EQUAL
    (26) operador_comparacion -> . IS_GREATER
    (27) operador_comparacion -> . IS_SMALLER
    (48) operador_logico -> . BOOLEAN_AND
    (49) operador_logico -> . BOOLEAN_OR
    (50) operador_logico -> . AND
    (51) operador_logico -> . OR
    (52) operador_logico -> . XOR
    (42) operador_aritmetico -> . ADDITION
    (43) operador_aritmetico -> . SUBTRACTION
    (44) operador_aritmetico -> . MULTIPLICATION
    (45) operador_aritmetico -> . DIVISION
    (46) operador_aritmetico -> . MODULO
    (47) operador_aritmetico -> . EXPONENTIATION

    ENDLINE         shift and go to state 59
    LPAREN          shift and go to state 39
    IS_EQUAL        shift and go to state 63
    IS_GREATER_OR_EQUAL shift and go to state 64
    IS_NOT_EQUAL    shift and go to state 65
    IS_SMALLER_OR_EQUAL shift and go to state 66
    IS_GREATER      shift and go to state 67
    IS_SMALLER      shift and go to state 68
    BOOLEAN_AND     shift and go to state 69
    BOOLEAN_OR      shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    XOR             shift and go to state 73
    ADDITION        shift and go to state 74
    SUBTRACTION     shift and go to state 75
    MULTIPLICATION  shift and go to state 76
    DIVISION        shift and go to state 77
    MODULO          shift and go to state 78
    EXPONENTIATION  shift and go to state 79

    operador_comparacion           shift and go to state 60
    operador_logico                shift and go to state 61
    operador_aritmetico            shift and go to state 62

state 43

    (17) asignacion -> VARIABLE operador_asignacion expresion . ENDLINE

    ENDLINE         shift and go to state 80


state 44

    (10) valor -> BOOLEAN .
    (37) expresion_logica -> BOOLEAN .

  ! reduce/reduce conflict for IS_EQUAL resolved using rule 10 (valor -> BOOLEAN .)
  ! reduce/reduce conflict for IS_GREATER_OR_EQUAL resolved using rule 10 (valor -> BOOLEAN .)
  ! reduce/reduce conflict for IS_NOT_EQUAL resolved using rule 10 (valor -> BOOLEAN .)
  ! reduce/reduce conflict for IS_SMALLER_OR_EQUAL resolved using rule 10 (valor -> BOOLEAN .)
  ! reduce/reduce conflict for IS_GREATER resolved using rule 10 (valor -> BOOLEAN .)
  ! reduce/reduce conflict for IS_SMALLER resolved using rule 10 (valor -> BOOLEAN .)
  ! reduce/reduce conflict for ENDLINE resolved using rule 10 (valor -> BOOLEAN .)
    ENDLINE         reduce using rule 10 (valor -> BOOLEAN .)
    LPAREN          reduce using rule 10 (valor -> BOOLEAN .)
    IS_EQUAL        reduce using rule 10 (valor -> BOOLEAN .)
    IS_GREATER_OR_EQUAL reduce using rule 10 (valor -> BOOLEAN .)
    IS_NOT_EQUAL    reduce using rule 10 (valor -> BOOLEAN .)
    IS_SMALLER_OR_EQUAL reduce using rule 10 (valor -> BOOLEAN .)
    IS_GREATER      reduce using rule 10 (valor -> BOOLEAN .)
    IS_SMALLER      reduce using rule 10 (valor -> BOOLEAN .)
    BOOLEAN_AND     reduce using rule 10 (valor -> BOOLEAN .)
    BOOLEAN_OR      reduce using rule 10 (valor -> BOOLEAN .)
    AND             reduce using rule 10 (valor -> BOOLEAN .)
    OR              reduce using rule 10 (valor -> BOOLEAN .)
    XOR             reduce using rule 10 (valor -> BOOLEAN .)
    ADDITION        reduce using rule 10 (valor -> BOOLEAN .)
    SUBTRACTION     reduce using rule 10 (valor -> BOOLEAN .)
    MULTIPLICATION  reduce using rule 10 (valor -> BOOLEAN .)
    DIVISION        reduce using rule 10 (valor -> BOOLEAN .)
    MODULO          reduce using rule 10 (valor -> BOOLEAN .)
    EXPONENTIATION  reduce using rule 10 (valor -> BOOLEAN .)

  ! IS_EQUAL        [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]
  ! IS_GREATER      [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]
  ! IS_SMALLER      [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]
  ! ENDLINE         [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]


state 45

    (35) expresion -> expresiones_logicas .

    ENDLINE         reduce using rule 35 (expresion -> expresiones_logicas .)


state 46

    (36) expresion -> expresiones_aritmeticas .

    ENDLINE         reduce using rule 36 (expresion -> expresiones_aritmeticas .)


state 47

    (40) expresiones_logicas -> expresion_logica .
    (41) expresiones_logicas -> expresion_logica . operador_comparacion expresiones_logicas
    (22) operador_comparacion -> . IS_EQUAL
    (23) operador_comparacion -> . IS_GREATER_OR_EQUAL
    (24) operador_comparacion -> . IS_NOT_EQUAL
    (25) operador_comparacion -> . IS_SMALLER_OR_EQUAL
    (26) operador_comparacion -> . IS_GREATER
    (27) operador_comparacion -> . IS_SMALLER

    ENDLINE         reduce using rule 40 (expresiones_logicas -> expresion_logica .)
    RPAREN          reduce using rule 40 (expresiones_logicas -> expresion_logica .)
    IS_EQUAL        shift and go to state 63
    IS_GREATER_OR_EQUAL shift and go to state 64
    IS_NOT_EQUAL    shift and go to state 65
    IS_SMALLER_OR_EQUAL shift and go to state 66
    IS_GREATER      shift and go to state 67
    IS_SMALLER      shift and go to state 68

    operador_comparacion           shift and go to state 81

state 48

    (54) expresiones_aritmeticas -> expresion_aritmetica .
    (55) expresiones_aritmeticas -> expresion_aritmetica . operador_aritmetico expresiones_aritmeticas
    (42) operador_aritmetico -> . ADDITION
    (43) operador_aritmetico -> . SUBTRACTION
    (44) operador_aritmetico -> . MULTIPLICATION
    (45) operador_aritmetico -> . DIVISION
    (46) operador_aritmetico -> . MODULO
    (47) operador_aritmetico -> . EXPONENTIATION

    ENDLINE         reduce using rule 54 (expresiones_aritmeticas -> expresion_aritmetica .)
    ADDITION        shift and go to state 74
    SUBTRACTION     shift and go to state 75
    MULTIPLICATION  shift and go to state 76
    DIVISION        shift and go to state 77
    MODULO          shift and go to state 78
    EXPONENTIATION  shift and go to state 79

    operador_aritmetico            shift and go to state 82

state 49

    (15) funcion -> FUNCTION ARGUMENTO LPAREN . VARIABLE RPAREN LKEY ARGUMENTO RKEY

    VARIABLE        shift and go to state 83


state 50

    (34) else -> if ELSE LKEY . cuerpo RKEY
    (1) cuerpo -> . salida
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . funcion
    (4) cuerpo -> . estructuras_control
    (5) salida -> . ECHO valor ENDLINE
    (6) salida -> . PRINT LPAREN valor RPAREN ENDLINE
    (16) asignacion -> . VARIABLE operador_asignacion valor ENDLINE
    (17) asignacion -> . VARIABLE operador_asignacion expresion ENDLINE
    (15) funcion -> . FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY
    (29) estructuras_control -> . if
    (30) estructuras_control -> . else
    (31) estructuras_control -> . while
    (32) estructuras_control -> . for
    (33) if -> . IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY
    (34) else -> . if ELSE LKEY cuerpo RKEY
    (57) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo
    (58) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY
    (72) for -> . FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    ECHO            shift and go to state 6
    PRINT           shift and go to state 7
    VARIABLE        shift and go to state 8
    FUNCTION        shift and go to state 9
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    if                             shift and go to state 10
    cuerpo                         shift and go to state 84
    salida                         shift and go to state 2
    asignacion                     shift and go to state 3
    funcion                        shift and go to state 4
    estructuras_control            shift and go to state 5
    else                           shift and go to state 11
    while                          shift and go to state 12
    for                            shift and go to state 13

state 51

    (33) if -> IF LPAREN expresiones_logicas . RPAREN LKEY cuerpo RKEY

    RPAREN          shift and go to state 85


state 52

    (37) expresion_logica -> BOOLEAN .
    (10) valor -> BOOLEAN .

  ! reduce/reduce conflict for IS_EQUAL resolved using rule 10 (valor -> BOOLEAN .)
  ! reduce/reduce conflict for IS_GREATER_OR_EQUAL resolved using rule 10 (valor -> BOOLEAN .)
  ! reduce/reduce conflict for IS_NOT_EQUAL resolved using rule 10 (valor -> BOOLEAN .)
  ! reduce/reduce conflict for IS_SMALLER_OR_EQUAL resolved using rule 10 (valor -> BOOLEAN .)
  ! reduce/reduce conflict for IS_GREATER resolved using rule 10 (valor -> BOOLEAN .)
  ! reduce/reduce conflict for IS_SMALLER resolved using rule 10 (valor -> BOOLEAN .)
    RPAREN          reduce using rule 37 (expresion_logica -> BOOLEAN .)
    ENDLINE         reduce using rule 37 (expresion_logica -> BOOLEAN .)
    LPAREN          reduce using rule 10 (valor -> BOOLEAN .)
    IS_EQUAL        reduce using rule 10 (valor -> BOOLEAN .)
    IS_GREATER_OR_EQUAL reduce using rule 10 (valor -> BOOLEAN .)
    IS_NOT_EQUAL    reduce using rule 10 (valor -> BOOLEAN .)
    IS_SMALLER_OR_EQUAL reduce using rule 10 (valor -> BOOLEAN .)
    IS_GREATER      reduce using rule 10 (valor -> BOOLEAN .)
    IS_SMALLER      reduce using rule 10 (valor -> BOOLEAN .)
    BOOLEAN_AND     reduce using rule 10 (valor -> BOOLEAN .)
    BOOLEAN_OR      reduce using rule 10 (valor -> BOOLEAN .)
    AND             reduce using rule 10 (valor -> BOOLEAN .)
    OR              reduce using rule 10 (valor -> BOOLEAN .)
    XOR             reduce using rule 10 (valor -> BOOLEAN .)

  ! IS_EQUAL        [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]
  ! IS_GREATER      [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]
  ! IS_SMALLER      [ reduce using rule 37 (expresion_logica -> BOOLEAN .) ]


state 53

    (38) expresion_logica -> valor . operador_comparacion valor
    (39) expresion_logica -> valor . operador_logico valor
    (60) funciones -> valor . LPAREN valor RPAREN LKEY cuerpo RKEY
    (22) operador_comparacion -> . IS_EQUAL
    (23) operador_comparacion -> . IS_GREATER_OR_EQUAL
    (24) operador_comparacion -> . IS_NOT_EQUAL
    (25) operador_comparacion -> . IS_SMALLER_OR_EQUAL
    (26) operador_comparacion -> . IS_GREATER
    (27) operador_comparacion -> . IS_SMALLER
    (48) operador_logico -> . BOOLEAN_AND
    (49) operador_logico -> . BOOLEAN_OR
    (50) operador_logico -> . AND
    (51) operador_logico -> . OR
    (52) operador_logico -> . XOR

    LPAREN          shift and go to state 39
    IS_EQUAL        shift and go to state 63
    IS_GREATER_OR_EQUAL shift and go to state 64
    IS_NOT_EQUAL    shift and go to state 65
    IS_SMALLER_OR_EQUAL shift and go to state 66
    IS_GREATER      shift and go to state 67
    IS_SMALLER      shift and go to state 68
    BOOLEAN_AND     shift and go to state 69
    BOOLEAN_OR      shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    XOR             shift and go to state 73

    operador_comparacion           shift and go to state 60
    operador_logico                shift and go to state 61

state 54

    (57) while -> WHILE LPAREN valor . operador_comparacion valor RPAREN COLON cuerpo
    (58) while -> WHILE LPAREN valor . operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY
    (60) funciones -> valor . LPAREN valor RPAREN LKEY cuerpo RKEY
    (22) operador_comparacion -> . IS_EQUAL
    (23) operador_comparacion -> . IS_GREATER_OR_EQUAL
    (24) operador_comparacion -> . IS_NOT_EQUAL
    (25) operador_comparacion -> . IS_SMALLER_OR_EQUAL
    (26) operador_comparacion -> . IS_GREATER
    (27) operador_comparacion -> . IS_SMALLER

    LPAREN          shift and go to state 39
    IS_EQUAL        shift and go to state 63
    IS_GREATER_OR_EQUAL shift and go to state 64
    IS_NOT_EQUAL    shift and go to state 65
    IS_SMALLER_OR_EQUAL shift and go to state 66
    IS_GREATER      shift and go to state 67
    IS_SMALLER      shift and go to state 68

    operador_comparacion           shift and go to state 86

state 55

    (72) for -> FOR LPAREN VARIABLE . EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    EQUAL           shift and go to state 87


state 56

    (60) funciones -> valor LPAREN valor . RPAREN LKEY cuerpo RKEY
    (60) funciones -> valor . LPAREN valor RPAREN LKEY cuerpo RKEY

    RPAREN          shift and go to state 88
    LPAREN          shift and go to state 39


state 57

    (59) array -> LBRACKET valor RBRACKET .

    ENDLINE         reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    LPAREN          reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    RBRACKET        reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    RPAREN          reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    IS_EQUAL        reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    IS_GREATER_OR_EQUAL reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    IS_NOT_EQUAL    reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    IS_SMALLER_OR_EQUAL reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    IS_GREATER      reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    IS_SMALLER      reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    BOOLEAN_AND     reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    BOOLEAN_OR      reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    AND             reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    OR              reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    XOR             reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    ADDITION        reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    SUBTRACTION     reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    MULTIPLICATION  reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    DIVISION        reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    MODULO          reduce using rule 59 (array -> LBRACKET valor RBRACKET .)
    EXPONENTIATION  reduce using rule 59 (array -> LBRACKET valor RBRACKET .)


state 58

    (6) salida -> PRINT LPAREN valor RPAREN . ENDLINE

    ENDLINE         shift and go to state 89


state 59

    (16) asignacion -> VARIABLE operador_asignacion valor ENDLINE .

    $end            reduce using rule 16 (asignacion -> VARIABLE operador_asignacion valor ENDLINE .)
    RKEY            reduce using rule 16 (asignacion -> VARIABLE operador_asignacion valor ENDLINE .)


state 60

    (38) expresion_logica -> valor operador_comparacion . valor
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (59) array -> . LBRACKET valor RBRACKET

    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    valor                          shift and go to state 90
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    array                          shift and go to state 26

state 61

    (39) expresion_logica -> valor operador_logico . valor
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (59) array -> . LBRACKET valor RBRACKET

    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    valor                          shift and go to state 91
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    array                          shift and go to state 26

state 62

    (53) expresion_aritmetica -> valor operador_aritmetico . valor
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (59) array -> . LBRACKET valor RBRACKET

    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    valor                          shift and go to state 92
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    array                          shift and go to state 26

state 63

    (22) operador_comparacion -> IS_EQUAL .

    ARGUMENTO       reduce using rule 22 (operador_comparacion -> IS_EQUAL .)
    INTEGER         reduce using rule 22 (operador_comparacion -> IS_EQUAL .)
    FLOAT           reduce using rule 22 (operador_comparacion -> IS_EQUAL .)
    BOOLEAN         reduce using rule 22 (operador_comparacion -> IS_EQUAL .)
    STRING          reduce using rule 22 (operador_comparacion -> IS_EQUAL .)
    VARIABLE        reduce using rule 22 (operador_comparacion -> IS_EQUAL .)
    LBRACKET        reduce using rule 22 (operador_comparacion -> IS_EQUAL .)


state 64

    (23) operador_comparacion -> IS_GREATER_OR_EQUAL .

    ARGUMENTO       reduce using rule 23 (operador_comparacion -> IS_GREATER_OR_EQUAL .)
    INTEGER         reduce using rule 23 (operador_comparacion -> IS_GREATER_OR_EQUAL .)
    FLOAT           reduce using rule 23 (operador_comparacion -> IS_GREATER_OR_EQUAL .)
    BOOLEAN         reduce using rule 23 (operador_comparacion -> IS_GREATER_OR_EQUAL .)
    STRING          reduce using rule 23 (operador_comparacion -> IS_GREATER_OR_EQUAL .)
    VARIABLE        reduce using rule 23 (operador_comparacion -> IS_GREATER_OR_EQUAL .)
    LBRACKET        reduce using rule 23 (operador_comparacion -> IS_GREATER_OR_EQUAL .)


state 65

    (24) operador_comparacion -> IS_NOT_EQUAL .

    ARGUMENTO       reduce using rule 24 (operador_comparacion -> IS_NOT_EQUAL .)
    INTEGER         reduce using rule 24 (operador_comparacion -> IS_NOT_EQUAL .)
    FLOAT           reduce using rule 24 (operador_comparacion -> IS_NOT_EQUAL .)
    BOOLEAN         reduce using rule 24 (operador_comparacion -> IS_NOT_EQUAL .)
    STRING          reduce using rule 24 (operador_comparacion -> IS_NOT_EQUAL .)
    VARIABLE        reduce using rule 24 (operador_comparacion -> IS_NOT_EQUAL .)
    LBRACKET        reduce using rule 24 (operador_comparacion -> IS_NOT_EQUAL .)


state 66

    (25) operador_comparacion -> IS_SMALLER_OR_EQUAL .

    ARGUMENTO       reduce using rule 25 (operador_comparacion -> IS_SMALLER_OR_EQUAL .)
    INTEGER         reduce using rule 25 (operador_comparacion -> IS_SMALLER_OR_EQUAL .)
    FLOAT           reduce using rule 25 (operador_comparacion -> IS_SMALLER_OR_EQUAL .)
    BOOLEAN         reduce using rule 25 (operador_comparacion -> IS_SMALLER_OR_EQUAL .)
    STRING          reduce using rule 25 (operador_comparacion -> IS_SMALLER_OR_EQUAL .)
    VARIABLE        reduce using rule 25 (operador_comparacion -> IS_SMALLER_OR_EQUAL .)
    LBRACKET        reduce using rule 25 (operador_comparacion -> IS_SMALLER_OR_EQUAL .)


state 67

    (26) operador_comparacion -> IS_GREATER .

    ARGUMENTO       reduce using rule 26 (operador_comparacion -> IS_GREATER .)
    INTEGER         reduce using rule 26 (operador_comparacion -> IS_GREATER .)
    FLOAT           reduce using rule 26 (operador_comparacion -> IS_GREATER .)
    BOOLEAN         reduce using rule 26 (operador_comparacion -> IS_GREATER .)
    STRING          reduce using rule 26 (operador_comparacion -> IS_GREATER .)
    VARIABLE        reduce using rule 26 (operador_comparacion -> IS_GREATER .)
    LBRACKET        reduce using rule 26 (operador_comparacion -> IS_GREATER .)


state 68

    (27) operador_comparacion -> IS_SMALLER .

    ARGUMENTO       reduce using rule 27 (operador_comparacion -> IS_SMALLER .)
    INTEGER         reduce using rule 27 (operador_comparacion -> IS_SMALLER .)
    FLOAT           reduce using rule 27 (operador_comparacion -> IS_SMALLER .)
    BOOLEAN         reduce using rule 27 (operador_comparacion -> IS_SMALLER .)
    STRING          reduce using rule 27 (operador_comparacion -> IS_SMALLER .)
    VARIABLE        reduce using rule 27 (operador_comparacion -> IS_SMALLER .)
    LBRACKET        reduce using rule 27 (operador_comparacion -> IS_SMALLER .)


state 69

    (48) operador_logico -> BOOLEAN_AND .

    ARGUMENTO       reduce using rule 48 (operador_logico -> BOOLEAN_AND .)
    INTEGER         reduce using rule 48 (operador_logico -> BOOLEAN_AND .)
    FLOAT           reduce using rule 48 (operador_logico -> BOOLEAN_AND .)
    BOOLEAN         reduce using rule 48 (operador_logico -> BOOLEAN_AND .)
    STRING          reduce using rule 48 (operador_logico -> BOOLEAN_AND .)
    VARIABLE        reduce using rule 48 (operador_logico -> BOOLEAN_AND .)
    LBRACKET        reduce using rule 48 (operador_logico -> BOOLEAN_AND .)


state 70

    (49) operador_logico -> BOOLEAN_OR .

    ARGUMENTO       reduce using rule 49 (operador_logico -> BOOLEAN_OR .)
    INTEGER         reduce using rule 49 (operador_logico -> BOOLEAN_OR .)
    FLOAT           reduce using rule 49 (operador_logico -> BOOLEAN_OR .)
    BOOLEAN         reduce using rule 49 (operador_logico -> BOOLEAN_OR .)
    STRING          reduce using rule 49 (operador_logico -> BOOLEAN_OR .)
    VARIABLE        reduce using rule 49 (operador_logico -> BOOLEAN_OR .)
    LBRACKET        reduce using rule 49 (operador_logico -> BOOLEAN_OR .)


state 71

    (50) operador_logico -> AND .

    ARGUMENTO       reduce using rule 50 (operador_logico -> AND .)
    INTEGER         reduce using rule 50 (operador_logico -> AND .)
    FLOAT           reduce using rule 50 (operador_logico -> AND .)
    BOOLEAN         reduce using rule 50 (operador_logico -> AND .)
    STRING          reduce using rule 50 (operador_logico -> AND .)
    VARIABLE        reduce using rule 50 (operador_logico -> AND .)
    LBRACKET        reduce using rule 50 (operador_logico -> AND .)


state 72

    (51) operador_logico -> OR .

    ARGUMENTO       reduce using rule 51 (operador_logico -> OR .)
    INTEGER         reduce using rule 51 (operador_logico -> OR .)
    FLOAT           reduce using rule 51 (operador_logico -> OR .)
    BOOLEAN         reduce using rule 51 (operador_logico -> OR .)
    STRING          reduce using rule 51 (operador_logico -> OR .)
    VARIABLE        reduce using rule 51 (operador_logico -> OR .)
    LBRACKET        reduce using rule 51 (operador_logico -> OR .)


state 73

    (52) operador_logico -> XOR .

    ARGUMENTO       reduce using rule 52 (operador_logico -> XOR .)
    INTEGER         reduce using rule 52 (operador_logico -> XOR .)
    FLOAT           reduce using rule 52 (operador_logico -> XOR .)
    BOOLEAN         reduce using rule 52 (operador_logico -> XOR .)
    STRING          reduce using rule 52 (operador_logico -> XOR .)
    VARIABLE        reduce using rule 52 (operador_logico -> XOR .)
    LBRACKET        reduce using rule 52 (operador_logico -> XOR .)


state 74

    (42) operador_aritmetico -> ADDITION .

    ARGUMENTO       reduce using rule 42 (operador_aritmetico -> ADDITION .)
    INTEGER         reduce using rule 42 (operador_aritmetico -> ADDITION .)
    FLOAT           reduce using rule 42 (operador_aritmetico -> ADDITION .)
    BOOLEAN         reduce using rule 42 (operador_aritmetico -> ADDITION .)
    STRING          reduce using rule 42 (operador_aritmetico -> ADDITION .)
    VARIABLE        reduce using rule 42 (operador_aritmetico -> ADDITION .)
    LBRACKET        reduce using rule 42 (operador_aritmetico -> ADDITION .)


state 75

    (43) operador_aritmetico -> SUBTRACTION .

    ARGUMENTO       reduce using rule 43 (operador_aritmetico -> SUBTRACTION .)
    INTEGER         reduce using rule 43 (operador_aritmetico -> SUBTRACTION .)
    FLOAT           reduce using rule 43 (operador_aritmetico -> SUBTRACTION .)
    BOOLEAN         reduce using rule 43 (operador_aritmetico -> SUBTRACTION .)
    STRING          reduce using rule 43 (operador_aritmetico -> SUBTRACTION .)
    VARIABLE        reduce using rule 43 (operador_aritmetico -> SUBTRACTION .)
    LBRACKET        reduce using rule 43 (operador_aritmetico -> SUBTRACTION .)


state 76

    (44) operador_aritmetico -> MULTIPLICATION .

    ARGUMENTO       reduce using rule 44 (operador_aritmetico -> MULTIPLICATION .)
    INTEGER         reduce using rule 44 (operador_aritmetico -> MULTIPLICATION .)
    FLOAT           reduce using rule 44 (operador_aritmetico -> MULTIPLICATION .)
    BOOLEAN         reduce using rule 44 (operador_aritmetico -> MULTIPLICATION .)
    STRING          reduce using rule 44 (operador_aritmetico -> MULTIPLICATION .)
    VARIABLE        reduce using rule 44 (operador_aritmetico -> MULTIPLICATION .)
    LBRACKET        reduce using rule 44 (operador_aritmetico -> MULTIPLICATION .)


state 77

    (45) operador_aritmetico -> DIVISION .

    ARGUMENTO       reduce using rule 45 (operador_aritmetico -> DIVISION .)
    INTEGER         reduce using rule 45 (operador_aritmetico -> DIVISION .)
    FLOAT           reduce using rule 45 (operador_aritmetico -> DIVISION .)
    BOOLEAN         reduce using rule 45 (operador_aritmetico -> DIVISION .)
    STRING          reduce using rule 45 (operador_aritmetico -> DIVISION .)
    VARIABLE        reduce using rule 45 (operador_aritmetico -> DIVISION .)
    LBRACKET        reduce using rule 45 (operador_aritmetico -> DIVISION .)


state 78

    (46) operador_aritmetico -> MODULO .

    ARGUMENTO       reduce using rule 46 (operador_aritmetico -> MODULO .)
    INTEGER         reduce using rule 46 (operador_aritmetico -> MODULO .)
    FLOAT           reduce using rule 46 (operador_aritmetico -> MODULO .)
    BOOLEAN         reduce using rule 46 (operador_aritmetico -> MODULO .)
    STRING          reduce using rule 46 (operador_aritmetico -> MODULO .)
    VARIABLE        reduce using rule 46 (operador_aritmetico -> MODULO .)
    LBRACKET        reduce using rule 46 (operador_aritmetico -> MODULO .)


state 79

    (47) operador_aritmetico -> EXPONENTIATION .

    ARGUMENTO       reduce using rule 47 (operador_aritmetico -> EXPONENTIATION .)
    INTEGER         reduce using rule 47 (operador_aritmetico -> EXPONENTIATION .)
    FLOAT           reduce using rule 47 (operador_aritmetico -> EXPONENTIATION .)
    BOOLEAN         reduce using rule 47 (operador_aritmetico -> EXPONENTIATION .)
    STRING          reduce using rule 47 (operador_aritmetico -> EXPONENTIATION .)
    VARIABLE        reduce using rule 47 (operador_aritmetico -> EXPONENTIATION .)
    LBRACKET        reduce using rule 47 (operador_aritmetico -> EXPONENTIATION .)


state 80

    (17) asignacion -> VARIABLE operador_asignacion expresion ENDLINE .

    $end            reduce using rule 17 (asignacion -> VARIABLE operador_asignacion expresion ENDLINE .)
    RKEY            reduce using rule 17 (asignacion -> VARIABLE operador_asignacion expresion ENDLINE .)


state 81

    (41) expresiones_logicas -> expresion_logica operador_comparacion . expresiones_logicas
    (40) expresiones_logicas -> . expresion_logica
    (41) expresiones_logicas -> . expresion_logica operador_comparacion expresiones_logicas
    (37) expresion_logica -> . BOOLEAN
    (38) expresion_logica -> . valor operador_comparacion valor
    (39) expresion_logica -> . valor operador_logico valor
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (59) array -> . LBRACKET valor RBRACKET

    BOOLEAN         shift and go to state 52
    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    expresion_logica               shift and go to state 47
    expresiones_logicas            shift and go to state 93
    valor                          shift and go to state 53
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    array                          shift and go to state 26

state 82

    (55) expresiones_aritmeticas -> expresion_aritmetica operador_aritmetico . expresiones_aritmeticas
    (54) expresiones_aritmeticas -> . expresion_aritmetica
    (55) expresiones_aritmeticas -> . expresion_aritmetica operador_aritmetico expresiones_aritmeticas
    (53) expresion_aritmetica -> . valor operador_aritmetico valor
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (59) array -> . LBRACKET valor RBRACKET

    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    expresion_aritmetica           shift and go to state 48
    expresiones_aritmeticas        shift and go to state 94
    valor                          shift and go to state 95
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    array                          shift and go to state 26

state 83

    (15) funcion -> FUNCTION ARGUMENTO LPAREN VARIABLE . RPAREN LKEY ARGUMENTO RKEY

    RPAREN          shift and go to state 96


state 84

    (34) else -> if ELSE LKEY cuerpo . RKEY

    RKEY            shift and go to state 97


state 85

    (33) if -> IF LPAREN expresiones_logicas RPAREN . LKEY cuerpo RKEY

    LKEY            shift and go to state 98


state 86

    (57) while -> WHILE LPAREN valor operador_comparacion . valor RPAREN COLON cuerpo
    (58) while -> WHILE LPAREN valor operador_comparacion . valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY
    (7) valor -> . ARGUMENTO
    (8) valor -> . INTEGER
    (9) valor -> . FLOAT
    (10) valor -> . BOOLEAN
    (11) valor -> . STRING
    (12) valor -> . VARIABLE
    (13) valor -> . estructuras_datos
    (14) valor -> . funciones
    (21) estructuras_datos -> . array
    (60) funciones -> . valor LPAREN valor RPAREN LKEY cuerpo RKEY
    (59) array -> . LBRACKET valor RBRACKET

    ARGUMENTO       shift and go to state 18
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21
    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    LBRACKET        shift and go to state 27

    valor                          shift and go to state 99
    estructuras_datos              shift and go to state 24
    funciones                      shift and go to state 25
    array                          shift and go to state 26

state 87

    (72) for -> FOR LPAREN VARIABLE EQUAL . INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    INTEGER         shift and go to state 100


state 88

    (60) funciones -> valor LPAREN valor RPAREN . LKEY cuerpo RKEY

    LKEY            shift and go to state 101


state 89

    (6) salida -> PRINT LPAREN valor RPAREN ENDLINE .

    $end            reduce using rule 6 (salida -> PRINT LPAREN valor RPAREN ENDLINE .)
    RKEY            reduce using rule 6 (salida -> PRINT LPAREN valor RPAREN ENDLINE .)


state 90

    (38) expresion_logica -> valor operador_comparacion valor .
    (60) funciones -> valor . LPAREN valor RPAREN LKEY cuerpo RKEY

    IS_EQUAL        reduce using rule 38 (expresion_logica -> valor operador_comparacion valor .)
    IS_GREATER_OR_EQUAL reduce using rule 38 (expresion_logica -> valor operador_comparacion valor .)
    IS_NOT_EQUAL    reduce using rule 38 (expresion_logica -> valor operador_comparacion valor .)
    IS_SMALLER_OR_EQUAL reduce using rule 38 (expresion_logica -> valor operador_comparacion valor .)
    IS_GREATER      reduce using rule 38 (expresion_logica -> valor operador_comparacion valor .)
    IS_SMALLER      reduce using rule 38 (expresion_logica -> valor operador_comparacion valor .)
    ENDLINE         reduce using rule 38 (expresion_logica -> valor operador_comparacion valor .)
    RPAREN          reduce using rule 38 (expresion_logica -> valor operador_comparacion valor .)
    LPAREN          shift and go to state 39


state 91

    (39) expresion_logica -> valor operador_logico valor .
    (60) funciones -> valor . LPAREN valor RPAREN LKEY cuerpo RKEY

    IS_EQUAL        reduce using rule 39 (expresion_logica -> valor operador_logico valor .)
    IS_GREATER_OR_EQUAL reduce using rule 39 (expresion_logica -> valor operador_logico valor .)
    IS_NOT_EQUAL    reduce using rule 39 (expresion_logica -> valor operador_logico valor .)
    IS_SMALLER_OR_EQUAL reduce using rule 39 (expresion_logica -> valor operador_logico valor .)
    IS_GREATER      reduce using rule 39 (expresion_logica -> valor operador_logico valor .)
    IS_SMALLER      reduce using rule 39 (expresion_logica -> valor operador_logico valor .)
    ENDLINE         reduce using rule 39 (expresion_logica -> valor operador_logico valor .)
    RPAREN          reduce using rule 39 (expresion_logica -> valor operador_logico valor .)
    LPAREN          shift and go to state 39


state 92

    (53) expresion_aritmetica -> valor operador_aritmetico valor .
    (60) funciones -> valor . LPAREN valor RPAREN LKEY cuerpo RKEY

    ADDITION        reduce using rule 53 (expresion_aritmetica -> valor operador_aritmetico valor .)
    SUBTRACTION     reduce using rule 53 (expresion_aritmetica -> valor operador_aritmetico valor .)
    MULTIPLICATION  reduce using rule 53 (expresion_aritmetica -> valor operador_aritmetico valor .)
    DIVISION        reduce using rule 53 (expresion_aritmetica -> valor operador_aritmetico valor .)
    MODULO          reduce using rule 53 (expresion_aritmetica -> valor operador_aritmetico valor .)
    EXPONENTIATION  reduce using rule 53 (expresion_aritmetica -> valor operador_aritmetico valor .)
    ENDLINE         reduce using rule 53 (expresion_aritmetica -> valor operador_aritmetico valor .)
    LPAREN          shift and go to state 39


state 93

    (41) expresiones_logicas -> expresion_logica operador_comparacion expresiones_logicas .

    ENDLINE         reduce using rule 41 (expresiones_logicas -> expresion_logica operador_comparacion expresiones_logicas .)
    RPAREN          reduce using rule 41 (expresiones_logicas -> expresion_logica operador_comparacion expresiones_logicas .)


state 94

    (55) expresiones_aritmeticas -> expresion_aritmetica operador_aritmetico expresiones_aritmeticas .

    ENDLINE         reduce using rule 55 (expresiones_aritmeticas -> expresion_aritmetica operador_aritmetico expresiones_aritmeticas .)


state 95

    (53) expresion_aritmetica -> valor . operador_aritmetico valor
    (60) funciones -> valor . LPAREN valor RPAREN LKEY cuerpo RKEY
    (42) operador_aritmetico -> . ADDITION
    (43) operador_aritmetico -> . SUBTRACTION
    (44) operador_aritmetico -> . MULTIPLICATION
    (45) operador_aritmetico -> . DIVISION
    (46) operador_aritmetico -> . MODULO
    (47) operador_aritmetico -> . EXPONENTIATION

    LPAREN          shift and go to state 39
    ADDITION        shift and go to state 74
    SUBTRACTION     shift and go to state 75
    MULTIPLICATION  shift and go to state 76
    DIVISION        shift and go to state 77
    MODULO          shift and go to state 78
    EXPONENTIATION  shift and go to state 79

    operador_aritmetico            shift and go to state 62

state 96

    (15) funcion -> FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN . LKEY ARGUMENTO RKEY

    LKEY            shift and go to state 102


state 97

    (34) else -> if ELSE LKEY cuerpo RKEY .

    $end            reduce using rule 34 (else -> if ELSE LKEY cuerpo RKEY .)
    RKEY            reduce using rule 34 (else -> if ELSE LKEY cuerpo RKEY .)


state 98

    (33) if -> IF LPAREN expresiones_logicas RPAREN LKEY . cuerpo RKEY
    (1) cuerpo -> . salida
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . funcion
    (4) cuerpo -> . estructuras_control
    (5) salida -> . ECHO valor ENDLINE
    (6) salida -> . PRINT LPAREN valor RPAREN ENDLINE
    (16) asignacion -> . VARIABLE operador_asignacion valor ENDLINE
    (17) asignacion -> . VARIABLE operador_asignacion expresion ENDLINE
    (15) funcion -> . FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY
    (29) estructuras_control -> . if
    (30) estructuras_control -> . else
    (31) estructuras_control -> . while
    (32) estructuras_control -> . for
    (33) if -> . IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY
    (34) else -> . if ELSE LKEY cuerpo RKEY
    (57) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo
    (58) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY
    (72) for -> . FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    ECHO            shift and go to state 6
    PRINT           shift and go to state 7
    VARIABLE        shift and go to state 8
    FUNCTION        shift and go to state 9
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    cuerpo                         shift and go to state 103
    salida                         shift and go to state 2
    asignacion                     shift and go to state 3
    funcion                        shift and go to state 4
    estructuras_control            shift and go to state 5
    if                             shift and go to state 10
    else                           shift and go to state 11
    while                          shift and go to state 12
    for                            shift and go to state 13

state 99

    (57) while -> WHILE LPAREN valor operador_comparacion valor . RPAREN COLON cuerpo
    (58) while -> WHILE LPAREN valor operador_comparacion valor . RPAREN LKEY TAB_VERTICAL cuerpo RKEY
    (60) funciones -> valor . LPAREN valor RPAREN LKEY cuerpo RKEY

    RPAREN          shift and go to state 104
    LPAREN          shift and go to state 39


state 100

    (72) for -> FOR LPAREN VARIABLE EQUAL INTEGER . ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    ENDLINE         shift and go to state 105


state 101

    (60) funciones -> valor LPAREN valor RPAREN LKEY . cuerpo RKEY
    (1) cuerpo -> . salida
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . funcion
    (4) cuerpo -> . estructuras_control
    (5) salida -> . ECHO valor ENDLINE
    (6) salida -> . PRINT LPAREN valor RPAREN ENDLINE
    (16) asignacion -> . VARIABLE operador_asignacion valor ENDLINE
    (17) asignacion -> . VARIABLE operador_asignacion expresion ENDLINE
    (15) funcion -> . FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY
    (29) estructuras_control -> . if
    (30) estructuras_control -> . else
    (31) estructuras_control -> . while
    (32) estructuras_control -> . for
    (33) if -> . IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY
    (34) else -> . if ELSE LKEY cuerpo RKEY
    (57) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo
    (58) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY
    (72) for -> . FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    ECHO            shift and go to state 6
    PRINT           shift and go to state 7
    VARIABLE        shift and go to state 8
    FUNCTION        shift and go to state 9
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    cuerpo                         shift and go to state 106
    salida                         shift and go to state 2
    asignacion                     shift and go to state 3
    funcion                        shift and go to state 4
    estructuras_control            shift and go to state 5
    if                             shift and go to state 10
    else                           shift and go to state 11
    while                          shift and go to state 12
    for                            shift and go to state 13

state 102

    (15) funcion -> FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY . ARGUMENTO RKEY

    ARGUMENTO       shift and go to state 107


state 103

    (33) if -> IF LPAREN expresiones_logicas RPAREN LKEY cuerpo . RKEY

    RKEY            shift and go to state 108


state 104

    (57) while -> WHILE LPAREN valor operador_comparacion valor RPAREN . COLON cuerpo
    (58) while -> WHILE LPAREN valor operador_comparacion valor RPAREN . LKEY TAB_VERTICAL cuerpo RKEY

    COLON           shift and go to state 109
    LKEY            shift and go to state 110


state 105

    (72) for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE . VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    VARIABLE        shift and go to state 111


state 106

    (60) funciones -> valor LPAREN valor RPAREN LKEY cuerpo . RKEY

    RKEY            shift and go to state 112


state 107

    (15) funcion -> FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO . RKEY

    RKEY            shift and go to state 113


state 108

    (33) if -> IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY .

    ELSE            reduce using rule 33 (if -> IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY .)
    $end            reduce using rule 33 (if -> IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY .)
    RKEY            reduce using rule 33 (if -> IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY .)


state 109

    (57) while -> WHILE LPAREN valor operador_comparacion valor RPAREN COLON . cuerpo
    (1) cuerpo -> . salida
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . funcion
    (4) cuerpo -> . estructuras_control
    (5) salida -> . ECHO valor ENDLINE
    (6) salida -> . PRINT LPAREN valor RPAREN ENDLINE
    (16) asignacion -> . VARIABLE operador_asignacion valor ENDLINE
    (17) asignacion -> . VARIABLE operador_asignacion expresion ENDLINE
    (15) funcion -> . FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY
    (29) estructuras_control -> . if
    (30) estructuras_control -> . else
    (31) estructuras_control -> . while
    (32) estructuras_control -> . for
    (33) if -> . IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY
    (34) else -> . if ELSE LKEY cuerpo RKEY
    (57) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo
    (58) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY
    (72) for -> . FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    ECHO            shift and go to state 6
    PRINT           shift and go to state 7
    VARIABLE        shift and go to state 8
    FUNCTION        shift and go to state 9
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    cuerpo                         shift and go to state 114
    salida                         shift and go to state 2
    asignacion                     shift and go to state 3
    funcion                        shift and go to state 4
    estructuras_control            shift and go to state 5
    if                             shift and go to state 10
    else                           shift and go to state 11
    while                          shift and go to state 12
    for                            shift and go to state 13

state 110

    (58) while -> WHILE LPAREN valor operador_comparacion valor RPAREN LKEY . TAB_VERTICAL cuerpo RKEY

    TAB_VERTICAL    shift and go to state 115


state 111

    (72) for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE . operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY
    (22) operador_comparacion -> . IS_EQUAL
    (23) operador_comparacion -> . IS_GREATER_OR_EQUAL
    (24) operador_comparacion -> . IS_NOT_EQUAL
    (25) operador_comparacion -> . IS_SMALLER_OR_EQUAL
    (26) operador_comparacion -> . IS_GREATER
    (27) operador_comparacion -> . IS_SMALLER

    IS_EQUAL        shift and go to state 63
    IS_GREATER_OR_EQUAL shift and go to state 64
    IS_NOT_EQUAL    shift and go to state 65
    IS_SMALLER_OR_EQUAL shift and go to state 66
    IS_GREATER      shift and go to state 67
    IS_SMALLER      shift and go to state 68

    operador_comparacion           shift and go to state 116

state 112

    (60) funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .

    ENDLINE         reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    LPAREN          reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    RBRACKET        reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    RPAREN          reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    IS_EQUAL        reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    IS_GREATER_OR_EQUAL reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    IS_NOT_EQUAL    reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    IS_SMALLER_OR_EQUAL reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    IS_GREATER      reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    IS_SMALLER      reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    BOOLEAN_AND     reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    BOOLEAN_OR      reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    AND             reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    OR              reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    XOR             reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    ADDITION        reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    SUBTRACTION     reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    MULTIPLICATION  reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    DIVISION        reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    MODULO          reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)
    EXPONENTIATION  reduce using rule 60 (funciones -> valor LPAREN valor RPAREN LKEY cuerpo RKEY .)


state 113

    (15) funcion -> FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY .

    $end            reduce using rule 15 (funcion -> FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY .)
    RKEY            reduce using rule 15 (funcion -> FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY .)


state 114

    (57) while -> WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo .

    $end            reduce using rule 57 (while -> WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo .)
    RKEY            reduce using rule 57 (while -> WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo .)


state 115

    (58) while -> WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL . cuerpo RKEY
    (1) cuerpo -> . salida
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . funcion
    (4) cuerpo -> . estructuras_control
    (5) salida -> . ECHO valor ENDLINE
    (6) salida -> . PRINT LPAREN valor RPAREN ENDLINE
    (16) asignacion -> . VARIABLE operador_asignacion valor ENDLINE
    (17) asignacion -> . VARIABLE operador_asignacion expresion ENDLINE
    (15) funcion -> . FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY
    (29) estructuras_control -> . if
    (30) estructuras_control -> . else
    (31) estructuras_control -> . while
    (32) estructuras_control -> . for
    (33) if -> . IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY
    (34) else -> . if ELSE LKEY cuerpo RKEY
    (57) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo
    (58) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY
    (72) for -> . FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    ECHO            shift and go to state 6
    PRINT           shift and go to state 7
    VARIABLE        shift and go to state 8
    FUNCTION        shift and go to state 9
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    cuerpo                         shift and go to state 117
    salida                         shift and go to state 2
    asignacion                     shift and go to state 3
    funcion                        shift and go to state 4
    estructuras_control            shift and go to state 5
    if                             shift and go to state 10
    else                           shift and go to state 11
    while                          shift and go to state 12
    for                            shift and go to state 13

state 116

    (72) for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion . INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    INTEGER         shift and go to state 118


state 117

    (58) while -> WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo . RKEY

    RKEY            shift and go to state 119


state 118

    (72) for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER . ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    ENDLINE         shift and go to state 120


state 119

    (58) while -> WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY .

    $end            reduce using rule 58 (while -> WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY .)
    RKEY            reduce using rule 58 (while -> WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY .)


state 120

    (72) for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE . forma_operacion RPAREN LKEY cuerpo RKEY
    (67) forma_operacion -> . VARIABLE OPERADOR_INCREMENTO
    (68) forma_operacion -> . OPERADOR_INCREMENTO VARIABLE
    (69) forma_operacion -> . VARIABLE OPERADOR_DECREMENTO
    (70) forma_operacion -> . OPERADOR_DECREMENTO VARIABLE
    (71) forma_operacion -> . VARIABLE EQUAL VARIABLE tipo_operador INTEGER

    VARIABLE        shift and go to state 121
    OPERADOR_INCREMENTO shift and go to state 123
    OPERADOR_DECREMENTO shift and go to state 124

    forma_operacion                shift and go to state 122

state 121

    (67) forma_operacion -> VARIABLE . OPERADOR_INCREMENTO
    (69) forma_operacion -> VARIABLE . OPERADOR_DECREMENTO
    (71) forma_operacion -> VARIABLE . EQUAL VARIABLE tipo_operador INTEGER

    OPERADOR_INCREMENTO shift and go to state 125
    OPERADOR_DECREMENTO shift and go to state 126
    EQUAL           shift and go to state 127


state 122

    (72) for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion . RPAREN LKEY cuerpo RKEY

    RPAREN          shift and go to state 128


state 123

    (68) forma_operacion -> OPERADOR_INCREMENTO . VARIABLE

    VARIABLE        shift and go to state 129


state 124

    (70) forma_operacion -> OPERADOR_DECREMENTO . VARIABLE

    VARIABLE        shift and go to state 130


state 125

    (67) forma_operacion -> VARIABLE OPERADOR_INCREMENTO .

    RPAREN          reduce using rule 67 (forma_operacion -> VARIABLE OPERADOR_INCREMENTO .)


state 126

    (69) forma_operacion -> VARIABLE OPERADOR_DECREMENTO .

    RPAREN          reduce using rule 69 (forma_operacion -> VARIABLE OPERADOR_DECREMENTO .)


state 127

    (71) forma_operacion -> VARIABLE EQUAL . VARIABLE tipo_operador INTEGER

    VARIABLE        shift and go to state 131


state 128

    (72) for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN . LKEY cuerpo RKEY

    LKEY            shift and go to state 132


state 129

    (68) forma_operacion -> OPERADOR_INCREMENTO VARIABLE .

    RPAREN          reduce using rule 68 (forma_operacion -> OPERADOR_INCREMENTO VARIABLE .)


state 130

    (70) forma_operacion -> OPERADOR_DECREMENTO VARIABLE .

    RPAREN          reduce using rule 70 (forma_operacion -> OPERADOR_DECREMENTO VARIABLE .)


state 131

    (71) forma_operacion -> VARIABLE EQUAL VARIABLE . tipo_operador INTEGER
    (61) tipo_operador -> . ADDITION
    (62) tipo_operador -> . SUBTRACTION
    (63) tipo_operador -> . MULTIPLICATION
    (64) tipo_operador -> . DIVISION
    (65) tipo_operador -> . MODULO
    (66) tipo_operador -> . EXPONENTIATION

    ADDITION        shift and go to state 134
    SUBTRACTION     shift and go to state 135
    MULTIPLICATION  shift and go to state 136
    DIVISION        shift and go to state 137
    MODULO          shift and go to state 138
    EXPONENTIATION  shift and go to state 139

    tipo_operador                  shift and go to state 133

state 132

    (72) for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY . cuerpo RKEY
    (1) cuerpo -> . salida
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . funcion
    (4) cuerpo -> . estructuras_control
    (5) salida -> . ECHO valor ENDLINE
    (6) salida -> . PRINT LPAREN valor RPAREN ENDLINE
    (16) asignacion -> . VARIABLE operador_asignacion valor ENDLINE
    (17) asignacion -> . VARIABLE operador_asignacion expresion ENDLINE
    (15) funcion -> . FUNCTION ARGUMENTO LPAREN VARIABLE RPAREN LKEY ARGUMENTO RKEY
    (29) estructuras_control -> . if
    (30) estructuras_control -> . else
    (31) estructuras_control -> . while
    (32) estructuras_control -> . for
    (33) if -> . IF LPAREN expresiones_logicas RPAREN LKEY cuerpo RKEY
    (34) else -> . if ELSE LKEY cuerpo RKEY
    (57) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN COLON cuerpo
    (58) while -> . WHILE LPAREN valor operador_comparacion valor RPAREN LKEY TAB_VERTICAL cuerpo RKEY
    (72) for -> . FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY

    ECHO            shift and go to state 6
    PRINT           shift and go to state 7
    VARIABLE        shift and go to state 8
    FUNCTION        shift and go to state 9
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    cuerpo                         shift and go to state 140
    salida                         shift and go to state 2
    asignacion                     shift and go to state 3
    funcion                        shift and go to state 4
    estructuras_control            shift and go to state 5
    if                             shift and go to state 10
    else                           shift and go to state 11
    while                          shift and go to state 12
    for                            shift and go to state 13

state 133

    (71) forma_operacion -> VARIABLE EQUAL VARIABLE tipo_operador . INTEGER

    INTEGER         shift and go to state 141


state 134

    (61) tipo_operador -> ADDITION .

    INTEGER         reduce using rule 61 (tipo_operador -> ADDITION .)


state 135

    (62) tipo_operador -> SUBTRACTION .

    INTEGER         reduce using rule 62 (tipo_operador -> SUBTRACTION .)


state 136

    (63) tipo_operador -> MULTIPLICATION .

    INTEGER         reduce using rule 63 (tipo_operador -> MULTIPLICATION .)


state 137

    (64) tipo_operador -> DIVISION .

    INTEGER         reduce using rule 64 (tipo_operador -> DIVISION .)


state 138

    (65) tipo_operador -> MODULO .

    INTEGER         reduce using rule 65 (tipo_operador -> MODULO .)


state 139

    (66) tipo_operador -> EXPONENTIATION .

    INTEGER         reduce using rule 66 (tipo_operador -> EXPONENTIATION .)


state 140

    (72) for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo . RKEY

    RKEY            shift and go to state 142


state 141

    (71) forma_operacion -> VARIABLE EQUAL VARIABLE tipo_operador INTEGER .

    RPAREN          reduce using rule 71 (forma_operacion -> VARIABLE EQUAL VARIABLE tipo_operador INTEGER .)


state 142

    (72) for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY .

    $end            reduce using rule 72 (for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY .)
    RKEY            reduce using rule 72 (for -> FOR LPAREN VARIABLE EQUAL INTEGER ENDLINE VARIABLE operador_comparacion INTEGER ENDLINE forma_operacion RPAREN LKEY cuerpo RKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 44 resolved using rule (valor -> BOOLEAN)
WARNING: rejected rule (expresion_logica -> BOOLEAN) in state 44
WARNING: reduce/reduce conflict in state 52 resolved using rule (valor -> BOOLEAN)
WARNING: rejected rule (expresion_logica -> BOOLEAN) in state 52
